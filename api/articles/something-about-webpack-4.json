{"title":"Webpack 4 实战","slug":"something-about-webpack-4","date":"2018-05-16T09:48:23.000Z","updated":"2018-05-23T09:31:26.232Z","comments":true,"path":"api/articles/something-about-webpack-4.json","excerpt":"最近在参与小组内造“轮子”（具体内容另寻机会再详说）在过程中，了解并且学习到 Webpack v4 的一些内容，趁记忆还深，汇总成下文，鉴于 Webpack 在 Google 搜索有很多相关的文章，本文只介绍开发过程积累的 4.0 版本的内容。PS. 暂时只结合 React 项目来说明，后面会找时间补充 Vue 项目。PPS. 前半部分较为基础，有一定经验的同学可以直接跳过看后半部分实战内容。","covers":null,"content":"<p>最近在参与小组内造“轮子”（具体内容另寻机会再详说）在过程中，了解并且学习到 Webpack v4 的一些内容，趁记忆还深，汇总成下文，鉴于 Webpack 在 Google 搜索有很多相关的文章，本文只介绍开发过程积累的 <strong>4.0</strong> 版本的内容。</p>\n<p>PS. 暂时只结合 <code>React</code> 项目来说明，后面会找时间补充 <code>Vue</code> 项目。</p>\n<p>PPS. 前半部分较为基础，有一定经验的同学可以直接跳过看<a href=\"#实战\">后半部分实战内容</a>。</p>\n<a id=\"more\"></a>\n<p>以前也翻译过两篇关于 Webpack 的文章，感兴趣的同学可以点击链接查看：</p>\n<ul>\n<li><a href=\"/2018/05/02/blog-translate-web-performance-optimization-with-webpack-from-google-webpack4/\">【译】Google 出品 - 利用 webpack 做 web 性能优化</a> !!! 强烈推荐 !!!</li>\n<li><a href=\"/2018/04/18/blog-translate-webpack-4-mode-and-optimization/\">【译】Webpack 4 mode and optimization</a></li>\n</ul>\n<!-- TOC -->\n<ul>\n<li><a href=\"#webpack-4-从零开始\">Webpack 4 从“零”开始</a></li>\n<li><a href=\"#webpack-4x--react-16x\">Webpack 4.x &amp; React 16.x</a><ul>\n<li><a href=\"#项目初始化\">项目初始化</a></li>\n<li><a href=\"#进入开发阶段\">进入开发阶段</a><ul>\n<li><a href=\"#dev-server\">dev-server</a></li>\n<li><a href=\"#热更新-hmr\">热更新 HMR</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#实战内容经验积累\">实战内容（经验积累）</a><ul>\n<li><a href=\"#提取公共依赖\">提取公共依赖</a></li>\n<li><a href=\"#文件压缩\">文件压缩</a></li>\n<li><a href=\"#proxy-接口代理\">proxy 接口代理</a></li>\n<li><a href=\"#支持多入口\">支持多入口</a></li>\n<li><a href=\"#预编译-sass引入-postcss处理-css-压缩-和-文件分离\">预编译 sass、引入 postcss、处理 css 压缩 和 文件分离</a></li>\n<li><a href=\"#支持-cdn-路径替换\">支持 CDN 路径替换</a></li>\n<li><a href=\"#生产环境-source-map\">生产环境 source-map</a></li>\n<li><a href=\"#处理图片资源\">处理图片资源</a></li>\n<li><a href=\"#其他插件\">其他插件</a></li>\n</ul>\n</li>\n<li><a href=\"#小结\">小结</a></li>\n</ul>\n<!-- /TOC -->\n<p>正文开始</p>\n<h2 id=\"Webpack-4-从“零”开始\"><a href=\"#Webpack-4-从“零”开始\" class=\"headerlink\" title=\"Webpack 4 从“零”开始\"></a>Webpack 4 从“零”开始</h2><p>说起 <code>Webpack V4.0</code> 就不得不提到这个版本做出的一个大的改变，就是<strong>“零”配置使用</strong>，下面我们就先来看一下 <code>Webpack</code> 的“零”。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir webpack-4-demo</span><br><span class=\"line\"><span class=\"built_in\">cd</span> webpack-4-demo</span><br><span class=\"line\">yarn init -y</span><br><span class=\"line\">yarn add webpack --dev</span><br></pre></td></tr></table></figure>\n<p>首先，我们来创建一个 <code>demo</code> 文件夹，做一些简单的初始化信息，并本地安装 <code>webpack</code>，此时项目中没有 webpack 配置文件。修改 <code>package.json</code> 文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"build\": \"webpack\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn build</span><br></pre></td></tr></table></figure>\n<p>过程中会提示是否安装 <code>webpack-cli</code> 直接敲 <code>yes</code> 即可。</p>\n<p>此时控制台执行结果会有如下报错：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR <span class=\"keyword\">in</span> Entry module not found: Error: Can<span class=\"string\">'t resolve '</span>./src<span class=\"string\">' in '</span>/Users/xxxx/webpack-4-demo<span class=\"string\">'</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! code ELIFECYCLE</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! errno 2</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! webpack-4-demo@1.0.0 build: `webpack`</span></span><br><span class=\"line\"><span class=\"string\">npm ERR! Exit status 2</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：目前我们没有写配置文件，但 Webpack 会提示没有找到 <code>./src</code> 目录下 module。Webpack v4.0 已经可以自动在不配置 entry 的时候自动检索项目文件夹中 src 目录下的 js 文件进行编译了。</p>\n</blockquote>\n<p>接下来我们按照错误提示，在目录下创建 <code>src</code> 文件夹，并且新建一个文件 <code>index.js</code> 并且输入内容 <code>console.log(&#39;hello webpack 4&#39;)</code>，再次运行 <code>yarn build</code>。</p>\n<p>这时可以看到编译成功，项目目录下多出一个 <code>dist</code> 文件夹，我们事先也并没有配置 <code>output</code> 输出指向，<code>Webpack</code> 默认将 bundle 好的内容，放在了 dist 文件夹内。</p>\n<p>在执行成功的过程中，有一处警告提示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARNING <span class=\"keyword\">in</span> configuration</span><br><span class=\"line\">The <span class=\"string\">'mode'</span> option has not been <span class=\"built_in\">set</span>, webpack will fallback to <span class=\"string\">'production'</span> <span class=\"keyword\">for</span> this value. Set <span class=\"string\">'mode'</span> option to <span class=\"string\">'development'</span> or <span class=\"string\">'production'</span> to <span class=\"built_in\">enable</span> defaults <span class=\"keyword\">for</span> each environment.</span><br><span class=\"line\">You can also <span class=\"built_in\">set</span> it to <span class=\"string\">'none'</span> to <span class=\"built_in\">disable</span> any default behavior. Learn more: https://webpack.js.org/concepts/mode/</span><br></pre></td></tr></table></figure>\n<p>回过头查看刚刚编译好的 <code>main.js</code> 文件，此时文件内容已经直接被压缩好的，也就是执行时默认在生产模式下执行的。</p>\n<p>Webpack 4 新增的一个 <code>mode</code> 配置，具体配置可以详见下面链接，以及笔者之前的翻译文章。</p>\n<ul>\n<li><a href=\"https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a\" target=\"_blank\" rel=\"noopener\">【原文】Webpack 4 mode and optimization</a></li>\n<li><a href=\"/2018/04/18/blog-translate-webpack-4-mode-and-optimization/\">【译】Webpack 4 mode and optimization</a></li>\n</ul>\n<p>当然，也可以通过 <code>--mode</code> 选项来手动选择 bundle 的模式，比如 <code>webpack --mode development</code>。</p>\n<p>自此，如果你的项目 src 目录下的内容需要 Webpack 帮你编译，输出在 dist 目录，Webpack 几乎零配置就可以直接“胜任”了。</p>\n<h2 id=\"Webpack-4-x-amp-React-16-x\"><a href=\"#Webpack-4-x-amp-React-16-x\" class=\"headerlink\" title=\"Webpack 4.x &amp; React 16.x\"></a>Webpack 4.x &amp; React 16.x</h2><p>上一节简单介绍了 V4.x <strong>“零”</strong>配置的基础应用的说明。当然，实际工作中我们的项目都会比较复杂，上面的内容远不能满足我们的需求，下面我们就以一个 <code>React 16 + Webpack 4</code> DEMO 项目为例，还原从零开始搭建基于 <code>Webpack</code> 打包编译项目的整个过程。</p>\n<blockquote>\n<p>Facebook 官方推出的 <code>create-react-app</code> 工具已经非常好用，做一些修改也可以满足实际项目上线的需求，但是我们仍希望更多个性化的设置来支持我们的项目，且截至到今天 cra 使用 webpack 3.8 与我们本文介绍 webpack 4 有出入，下面内容不再提及，对 <code>cra</code> 感兴趣的同学也可以自行搜索查看了解。</p>\n</blockquote>\n<h3 id=\"项目初始化\"><a href=\"#项目初始化\" class=\"headerlink\" title=\"项目初始化\"></a>项目初始化</h3><p>首先，重复上面介绍的步骤：（创建目录、安装 react、安装 webpack、安装 babel）</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir react-webpack-demo</span><br><span class=\"line\"><span class=\"built_in\">cd</span> react-webpack-demo</span><br><span class=\"line\"><span class=\"comment\">## 初始化 package.json</span></span><br><span class=\"line\">yarn init -y</span><br><span class=\"line\"><span class=\"comment\">## 安装 react</span></span><br><span class=\"line\">yarn add react react-dom</span><br><span class=\"line\"><span class=\"comment\">## 安装 webpack</span></span><br><span class=\"line\">yarn add webpack webpack-cli --dev</span><br><span class=\"line\"><span class=\"comment\">## 安装 babel</span></span><br><span class=\"line\">yarn add @babel/core @babel/preset-env --dev</span><br><span class=\"line\"><span class=\"comment\">## 安装 babel-react</span></span><br><span class=\"line\">yarn add @babel/preset-react <span class=\"string\">\"babel-loader@^8.0.0-beta\"</span> --dev</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：这里使用 babel 转义，此处既可以在项目根目录下创建 <code>.babelrc</code> 文件，也可以稍后在 webpack.config.js 中配置，这里我们选择在后者统一配置。</p>\n</blockquote>\n<p>现在我们新建一个配置文件，<code>webpack.config.js</code> 代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">          options: &#123; <span class=\"comment\">// babel 转义的配置选项</span></span><br><span class=\"line\">            babelrc: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'@babel/preset-react'</span>),</span><br><span class=\"line\">              [<span class=\"built_in\">require</span>.resolve(<span class=\"string\">'@babel/preset-env'</span>), &#123; <span class=\"attr\">modules</span>: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            cacheDirectory: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>在 <code>src</code> 目录下创建 <code>App.jsx</code>：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">\"react-dom\"</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> App = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Hello React and Webpack&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> App;</span><br><span class=\"line\">ReactDOM.render(&lt;App /&gt;, document.getElementById(\"app\"));</span><br></pre></td></tr></table></figure>\n<p>在 <code>src</code> 下新建 <code>index.jsx</code> 内容如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">'./App'</span>;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>yarn build</code> 等待打包结果，此时目录 <code>dist</code> 下已经打包好 bundle。</p>\n<p>我们接着创建 html 文件，在 src 下创建 <code>index.html</code> :</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE HTML&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"zh-CN\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Hello React Webpack<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"app\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>修改 build 的配置，拷贝 html</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add html-webpack-plugin</span><br></pre></td></tr></table></figure>\n<p>修改上面的 config：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebPackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">\"html-webpack-plugin\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            babelrc: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'@babel/preset-react'</span>),</span><br><span class=\"line\">              [<span class=\"built_in\">require</span>.resolve(<span class=\"string\">'@babel/preset-env'</span>), &#123; <span class=\"attr\">modules</span>: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            cacheDirectory: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebPackPlugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">\"src/index.html\"</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">\"index.html\"</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>yarn build</code> 就可以看到已经打包好的 index.html 和 bundle js 。</p>\n<h3 id=\"进入开发阶段\"><a href=\"#进入开发阶段\" class=\"headerlink\" title=\"进入开发阶段\"></a>进入开发阶段</h3><h4 id=\"dev-server\"><a href=\"#dev-server\" class=\"headerlink\" title=\"dev-server\"></a>dev-server</h4><p>通过 <code>webpack-dev-server</code> 搭建本地 server 服务，目前是通用的解决办法</p>\n<p>安装依赖：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-dev-server --dev</span><br></pre></td></tr></table></figure>\n<p>在 <code>package.json</code> 的 scripts 中增加脚本：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"webpack-dev-server --mode development --open\",</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>运行 <code>yarn start</code> 此时会运行 dev-server 服务以用于本地开发。</p>\n<p>这里我们可以新建一个配置文件 <code>webpack.config.dev.js</code> ：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">'cheap-module-source-map'</span>,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    contentBase: path.join(__dirname, <span class=\"string\">\"./src/\"</span>),</span><br><span class=\"line\">    host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/'</span>,</span><br><span class=\"line\">    host: <span class=\"string\">'127.0.0.1'</span>,</span><br><span class=\"line\">    port: <span class=\"number\">3000</span>,</span><br><span class=\"line\">    stats: &#123;</span><br><span class=\"line\">      colors: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.jsx?$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">          options: &#123; <span class=\"comment\">// babel 转义的配置选项</span></span><br><span class=\"line\">            babelrc: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            presets: [</span><br><span class=\"line\">              <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'@babel/preset-react'</span>),</span><br><span class=\"line\">              [<span class=\"built_in\">require</span>.resolve(<span class=\"string\">'@babel/preset-env'</span>), &#123; <span class=\"attr\">modules</span>: <span class=\"literal\">false</span> &#125;],</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            cacheDirectory: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebPackPlugin(&#123;</span><br><span class=\"line\">      template: <span class=\"string\">'src/index.html'</span>,</span><br><span class=\"line\">      filename: <span class=\"string\">'index.html'</span>,</span><br><span class=\"line\">      inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>修改 <code>package.json</code> 中 scripts：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\"scripts\": &#123;</span><br><span class=\"line\">  \"start\": \"webpack-dev-server --config './webpack.config.dev.js'\"</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>重新执行 <code>yarn start</code> 可以看到修改配置后的 dev-server</p>\n<h4 id=\"热更新-HMR\"><a href=\"#热更新-HMR\" class=\"headerlink\" title=\"热更新 HMR\"></a>热更新 HMR</h4><p>配置热更新就可以实时将修改的代码，反应在 dev-server 跑的应用中，继续修改 config.dev.js 和 App.jsx 增加内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.dev.js config 部分</span></span><br><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  hot: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// webpack.config.dev.js plugins 部分</span></span><br><span class=\"line\">...</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin(),</span><br><span class=\"line\">  ...</span><br><span class=\"line\">]</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// app.jsx 页面底部新增</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"built_in\">module</span>.hot) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">module</span>.hot.accept(<span class=\"function\">(<span class=\"params\">err</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.error(<span class=\"string\">'Cannot apply HMR update.'</span>, err);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>执行 <code>yarn start</code> 重新启动 server，修改本地代码保存就可以看到控制台里重新编译的信息，浏览器中变化实际修改的内容了。</p>\n<h2 id=\"实战内容（经验积累）\"><a href=\"#实战内容（经验积累）\" class=\"headerlink\" title=\"实战内容（经验积累）\"></a>实战内容（经验积累）</h2><p>下面部分就是在项目过程中积累的一些基于 Webpack 4.x 的优化实战经验汇总。</p>\n<h3 id=\"提取公共依赖\"><a href=\"#提取公共依赖\" class=\"headerlink\" title=\"提取公共依赖\"></a>提取公共依赖</h3><p>将公共依赖如 <code>react</code>、<code>react-dom</code>、<code>axio</code> 等等文件抽取出来独立打包成公共依赖文件，从而减小业务包大小。</p>\n<p><code>CommonsChunkPlugin</code> 在 4.0 被取代。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">output: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  chunkFilename: <span class=\"string\">'js/[name].[chunkhash:8].js'</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">  nodeEnv: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  runtimeChunk: &#123;</span><br><span class=\"line\">    name: <span class=\"string\">'manifest'</span>, <span class=\"comment\">// 运行时文件</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  splitChunks: &#123;</span><br><span class=\"line\">    cacheGroups: &#123;</span><br><span class=\"line\">      commons: &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">        name: <span class=\"string\">'vendor'</span>, <span class=\"comment\">// 依赖第三方库要提取成的 vendor 的文件</span></span><br><span class=\"line\">        chunks: <span class=\"string\">'all'</span>, <span class=\"comment\">// 提取所有 chunks</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<p>通过上面的配置，可以将公共依赖和业务代码隔离开来。但是，也会存在一些<strong>隐患</strong>：</p>\n<ul>\n<li>随着项目复杂度增加，依赖库增多，<code>vendor.js</code> 的体积会越来越<strong>臃肿</strong></li>\n<li>多页面应用项目，不同页面仍然会加载到在本页面根本无用的公共依赖的冗余代码</li>\n</ul>\n<p>所以具体项目需要通过具体的需求来抽离出不同的 chunks 来分别引用，按需引用。</p>\n<h3 id=\"文件压缩\"><a href=\"#文件压缩\" class=\"headerlink\" title=\"文件压缩\"></a>文件压缩</h3><p>配置 <code>mode: &#39;production&#39;</code> Webpack 会使用默认插件 <code>[UglifyJs](https://github.com/webpack-contrib/uglifyjs-webpack-plugin)</code> 来进行压缩代码。</p>\n<p>官网提到在 <code>Webpack v4.0.0</code> 以前内置 <code>webpack.optimize.UglifyJsPlugin</code> 的插件，在 Webpack 4 以后，开始使用 ^1.0.0 独立的版本。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> UglifyJsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'uglifyjs-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> os = <span class=\"built_in\">require</span>(<span class=\"string\">'os'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// webpack config</span></span><br><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">  nodeEnv: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  minimizer: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">      cache: <span class=\"literal\">true</span>, <span class=\"comment\">// node_modules/.cache/uglifyjs-webpack-plugin</span></span><br><span class=\"line\">      parallel: os.cpus().length, <span class=\"comment\">// 并行 default:true os.cpus().length - 1</span></span><br><span class=\"line\">      uglifyOptions: &#123;</span><br><span class=\"line\">        ecma: <span class=\"number\">5</span>,</span><br><span class=\"line\">        mangle: <span class=\"literal\">true</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：4.0 版本压缩的代码已经放在 <code>optimization</code> 下 <code>minimizer</code> 节点下。<br>备注：关于 <code>parallel</code> 选项，新版的 uglifyjs 已经支持多核 CPU 并行执行，所以已经不需要 <code>webpack-parallel-uglify-plugin</code> 插件。</p>\n</blockquote>\n<h3 id=\"proxy-接口代理\"><a href=\"#proxy-接口代理\" class=\"headerlink\" title=\"proxy 接口代理\"></a>proxy 接口代理</h3><p>配合 dev-server 对代理本地启动的 server 某一域名进行代理，解决服务端接口暂时满足要求、本地请求跨域等问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  proxy: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"/api\"</span>: <span class=\"string\">\"https://localhost:3000\"</span>,</span><br><span class=\"line\">    changeOrigin: <span class=\"literal\">true</span>, <span class=\"comment\">// 支持跨域请求</span></span><br><span class=\"line\">    secure: <span class=\"literal\">true</span>, <span class=\"comment\">// 支持 https</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>文档见<a href=\"https://webpack.js.org/configuration/dev-server/#devserver-proxy\" target=\"_blank\" rel=\"noopener\">dev-server-proxy doc</a></p>\n<h3 id=\"支持多入口\"><a href=\"#支持多入口\" class=\"headerlink\" title=\"支持多入口\"></a>支持多入口</h3><p>解决办法目前比较<strong>粗暴</strong>，当前有多少个入口 html 就创建多少个 <code>HtmlWebpackPlugin</code> 插件实例。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> fs = <span class=\"built_in\">require</span>(<span class=\"string\">'fs'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 先找到项目指定目录下的所有 html 此处假设我们把入口 html 放在 src/html 下 app1.html、app2.html、app3.html</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> appHtmlEntries = fs.readdirSync(resolveToAppRoot(<span class=\"string\">'./src/html/'</span>))</span><br><span class=\"line\">  .filter(<span class=\"function\"><span class=\"params\">f</span> =&gt;</span> f.match(<span class=\"regexp\">/\\.html?$/</span>))</span><br><span class=\"line\">  .reduce(<span class=\"function\">(<span class=\"params\">acc, p</span>) =&gt;</span> <span class=\"built_in\">Object</span>.assign(acc, &#123; [path.basename(p).replace(<span class=\"regexp\">/\\.html?$/</span>, <span class=\"string\">''</span>)]: path.join(resolveToAppRoot(<span class=\"string\">'./src/html/'</span>), p) &#125;), &#123;&#125;);</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 每一个 html 创建一个 HtmlWebpackPlugin 实例</span></span><br><span class=\"line\"><span class=\"built_in\">Object</span>.keys(appHtmlEntries).forEach(<span class=\"function\">(<span class=\"params\">name</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> pluginHtml = <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>.html`</span>,</span><br><span class=\"line\">    template: <span class=\"string\">`src/html/<span class=\"subst\">$&#123;name&#125;</span>.html`</span>,</span><br><span class=\"line\">    chunks: [<span class=\"string\">`<span class=\"subst\">$&#123;name&#125;</span>`</span>, <span class=\"string\">'manifest'</span>, <span class=\"string\">'vendor'</span>],</span><br><span class=\"line\">    inject: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  webpackConfig.plugins.push(pluginHtml);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"预编译-sass、引入-postcss、处理-css-压缩-和-文件分离\"><a href=\"#预编译-sass、引入-postcss、处理-css-压缩-和-文件分离\" class=\"headerlink\" title=\"预编译 sass、引入 postcss、处理 css 压缩 和 文件分离\"></a>预编译 sass、引入 postcss、处理 css 压缩 和 文件分离</h3><p>这里要注意 rules 中 loader 数组的顺序，由于 webpack 执行 rules 是从最后一个执行，所以我们配置的顺序也是</p>\n<p>预编译 sass –&gt; 处理 postcss (做一些 css 补丁) –&gt; 处理 css –&gt; 压缩独立 css 文件</p>\n<p>升级到 4.0，已经不再使用 <code>extract-text-webpack-plugin</code> 插件来进行文件抽取，改用专门处理 <code>MiniCssExtractPlugin</code> 的插件，配合 <code>OptimizeCSSAssetsPlugin</code> 插件来压缩 css 文件。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> autoprefixer = <span class=\"built_in\">require</span>(<span class=\"string\">'autoprefixer'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> postcssFlexbugsFixes = <span class=\"built_in\">require</span>(<span class=\"string\">'postcss-flexbugs-fixes'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'mini-css-extract-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// rules 配置</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  test: <span class=\"regexp\">/\\.(css|sass|scss)$/</span>,</span><br><span class=\"line\">  use: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: MiniCssExtractPlugin.loader, <span class=\"comment\">// 这个 loader 放在最后一个执行，将编译好的 css 独立</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'css-loader'</span>),</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      loader: <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'postcss-loader'</span>),</span><br><span class=\"line\">      options: &#123;</span><br><span class=\"line\">        ident: <span class=\"string\">'postcss'</span>,</span><br><span class=\"line\">        plugins: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> [</span><br><span class=\"line\">          postcssFlexbugsFixes,</span><br><span class=\"line\">          autoprefixer(&#123;</span><br><span class=\"line\">            browsers: [</span><br><span class=\"line\">              <span class=\"string\">'&gt;1%'</span>,</span><br><span class=\"line\">              <span class=\"string\">'last 4 versions'</span>,</span><br><span class=\"line\">              <span class=\"string\">'Firefox ESR'</span>,</span><br><span class=\"line\">              <span class=\"string\">'not ie &lt; 9'</span>,</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            flexbox: <span class=\"string\">'no-2009'</span>,</span><br><span class=\"line\">          &#125;),</span><br><span class=\"line\">        ],</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"built_in\">require</span>.resolve(<span class=\"string\">'sass-loader'</span>),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// optimization 配置</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCSSAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'optimize-css-assets-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> cssnano = <span class=\"built_in\">require</span>(<span class=\"string\">'cssnano'</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">  nodeEnv: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  minimizer: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin(&#123;</span><br><span class=\"line\">      assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">      cssProcessor: cssnano, <span class=\"comment\">// 默认使用 cssnano 处理 css</span></span><br><span class=\"line\">      cssProcessorOptions: &#123;</span><br><span class=\"line\">        reduceIdents: <span class=\"literal\">false</span>, <span class=\"comment\">// 禁止将 keyframes 自动更名</span></span><br><span class=\"line\">        mergeIdents: <span class=\"literal\">false</span>, <span class=\"comment\">// 禁止自动合并 keyframes</span></span><br><span class=\"line\">        discardUnused: <span class=\"literal\">false</span>, <span class=\"comment\">// 禁止移除掉未使用的 keyframes</span></span><br><span class=\"line\">        autoprefixer: <span class=\"literal\">false</span>, <span class=\"comment\">// 禁止默认删除掉一些前缀，以减少兼容性的问题</span></span><br><span class=\"line\">        zindex: <span class=\"literal\">false</span>, <span class=\"comment\">// 禁止自动转换 z-index</span></span><br><span class=\"line\">        map: <span class=\"literal\">false</span>,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"comment\">// 独立 css 文件</span></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">  <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'css/[name].[contenthash:8].css'</span>,</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n<h3 id=\"支持-CDN-路径替换\"><a href=\"#支持-CDN-路径替换\" class=\"headerlink\" title=\"支持 CDN 路径替换\"></a>支持 CDN 路径替换</h3><p>可以将 html 中 css 和 js 的相对引用路径自动替换成配置的前缀路径，用来支持静态资源上线到具体指定的 CDN 路径来增加 app 内静态资源的下载速度。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  publicPath: <span class=\"string\">\"https://...cdnpath.../assets/\"</span> <span class=\"comment\">// CDN 资源 URL 前缀</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"生产环境-source-map\"><a href=\"#生产环境-source-map\" class=\"headerlink\" title=\"生产环境 source-map\"></a>生产环境 source-map</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">devtool: <span class=\"string\">'source-map'</span>,</span><br><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">  nodeEnv: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  minimizer: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> UglifyJsPlugin(&#123;</span><br><span class=\"line\">      ...</span><br><span class=\"line\">      sourceMap: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCSSAssetsPlugin(&#123;</span><br><span class=\"line\">      assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>,</span><br><span class=\"line\">      cssProcessor: cssnano, <span class=\"comment\">// 默认使用 cssnano 这个处理 css，看了一个 clean-css 的方案，4.2 版本才可用，以后再说</span></span><br><span class=\"line\">      cssProcessorOptions: &#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        map: &#123; <span class=\"attr\">inline</span>: <span class=\"literal\">false</span> &#125; ,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">  ],</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"处理图片资源\"><a href=\"#处理图片资源\" class=\"headerlink\" title=\"处理图片资源\"></a>处理图片资源</h3><p>关键 <code>loaders</code> 这里就不罗列配置</p>\n<ul>\n<li><code>file-loader</code> 文件无处理，直接拷贝</li>\n<li><code>url-loader</code> 可以增加 base64 处理</li>\n<li><code>svg-url-loader</code> 处理 svg 文件，也同样支持 base64</li>\n<li><code>image-webpack-loader</code> 图片文件降质压缩</li>\n</ul>\n<h3 id=\"其他插件\"><a href=\"#其他插件\" class=\"headerlink\" title=\"其他插件\"></a>其他插件</h3><ul>\n<li><code>HashedModuleIdsPlugin</code> 使用更稳定的 moudle id 生成方式</li>\n<li><code>webpack.optimize.ModuleConcatenationPlugin</code> 插件已经不需要单独配置，Webpack 4 已经默认在生产模式下打包时内置开启优化</li>\n</ul>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><blockquote>\n<p><code>并不是每一个人都想成为 Webpack 配置工程师！</code></p>\n</blockquote>\n<p>上面引用一句我们“造轮子”时使用的一句 slogan</p>\n<p>目前来说： 虽然 <code>Webpack</code> 还没有办法达到开箱即用的程度，而且这也不是它的被创造出来的初衷，简单的配置无法满足项目中的实际需求，各种各样的插件和解决方案也层出不穷，相信很多读者和我一样头疼它的很多配置，做了很多尝试也无法达到最优的配置。</p>\n<p>然而，它只是一个工具，也说不好再过多长时间会有新的工具来取代 webpack，我们可以共同拭目以待，当然既然你现在用到它，还是有必要花时间了解一下如何更好地让它为你和你的项目服务。</p>\n<p>关于 webpack 4 的配置经验我也在摸着石头过这条小河，网上也有诸多优化和解决方案，文中并没有面面俱到的将所有配置都详细说明或者并不是所有配置都是最有选择，欢迎私信留言讨论。</p>\n","categories":[{"name":"前端技术","path":"api/categories/前端技术.json"}],"tags":[{"name":"Webpack","path":"api/tags/Webpack.json"}]}