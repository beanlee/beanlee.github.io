{"title":"全栈的另一个选择：Serverless 无服务框架浅谈","slug":"learn-serverless-1-perf","date":"2019-05-27T01:49:55.000Z","updated":"2019-05-27T01:54:16.835Z","comments":true,"path":"api/articles/learn-serverless-1-perf.json","excerpt":"近期在准备部门内部的一个分享，思考了一些主题，最终还是决定结合自身 Web 服务端开发经验，来分享自己调研 Serverless 无服务建构的相关内容。以下全文是前期准备阶段调研和整理的一部分资料，梳理总结后，在制作 Slide 过程中书写逐字稿缩减而来的。分享结束后还会继续在这部分挖掘和实践，云计算中的 Serverless 是一个非常大的主题范畴，单凭这一篇文字是没办法细说全部，笔者也在路上，感兴趣的同学可以留言讨论，持续关注。","covers":["https://img13.360buyimg.com/imagetools/jfs/t1/34216/3/10689/429660/5ce7f56eE738c9244/5acde7a32fe6bfb2.png","https://img10.360buyimg.com/imagetools/jfs/t1/34915/27/8489/185047/5ce7f648E7236189c/3231bbec723c20d4.jpg","https://img13.360buyimg.com/imagetools/jfs/t1/31123/30/14938/62110/5cbfd86aE4d298c2d/e4d749fcf8bebbe9.png","https://img14.360buyimg.com/imagetools/jfs/t1/32322/39/14955/68163/5cbfd8ceE6dca5aba/5ec35ad91a639b58.png","https://img10.360buyimg.com/imagetools/jfs/t1/35669/26/5049/41753/5cbfc82cE3dcdef5a/44cd5664334d3147.png","https://img11.360buyimg.com/imagetools/jfs/t1/39852/25/2208/798984/5cbfc813Ef7ba456d/0841958f9f4ad1ba.png","https://img10.360buyimg.com/imagetools/jfs/t1/30962/38/15042/925646/5cbfc807E3572f826/931728f36c3a020e.png","https://img13.360buyimg.com/imagetools/jfs/t1/40122/31/2186/98044/5cbfc86cE71db4f20/d0f40086b6e6adb0.png","https://img14.360buyimg.com/imagetools/jfs/t1/37237/34/5506/283277/5cbfc863Efe309042/627cbcbbd720df24.png","https://img14.360buyimg.com/imagetools/jfs/t1/40014/2/2186/75810/5cbfc87cE68b55b7a/b38bd8b96f8d177f.jpg"],"content":"<blockquote>\n<p>近期在准备部门内部的一个分享，思考了一些主题，最终还是决定结合自身 Web 服务端开发经验，来分享自己调研 Serverless 无服务建构的相关内容。</p>\n</blockquote>\n<blockquote>\n<p>以下全文是前期准备阶段调研和整理的一部分资料，梳理总结后，在制作 Slide 过程中书写逐字稿缩减而来的。分享结束后还会继续在这部分挖掘和实践，云计算中的 Serverless 是一个非常大的主题范畴，单凭这一篇文字是没办法细说全部，笔者也在路上，感兴趣的同学可以留言讨论，持续关注。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"云计算热度不减\"><a href=\"#云计算热度不减\" class=\"headerlink\" title=\"云计算热度不减\"></a>云计算热度不减</h2><p>当今社会技术热点一直围绕区块链、AI、机器学习等领域，它们背后离不开云计算的支撑。云计算在经历多年的发展，从基础设施到应用场景拓展和落地方面，都已经取得了长足的进步，大到国家层面的云计算中心纷纷落地，小到商业上各大云服务商和互联网IT厂商纷纷推出各自的云产品。在众多云计算解决方案中，<strong>Serverless</strong> 逐渐崭露头角，受到了很多关注并且发展迅猛，如果你也像笔者一样感兴趣想了解一下的话，那么请继续阅读吧！</p>\n<hr>\n<p>提到云计算的发展，我们可以先来简单了解云计算应用架构在没有出现 Serverless 概念之前的演进过程。</p>\n<h2 id=\"软件应用架构和云服务的演进\"><a href=\"#软件应用架构和云服务的演进\" class=\"headerlink\" title=\"软件应用架构和云服务的演进\"></a>软件应用架构和云服务的演进</h2><p>首先，先来通过一张网络流传很久的 Pizza as a Service 图来了解一下几个缩写，图源来自 <a href=\"https://m.oursky.com/saas-paas-and-iaas-explained-in-one-graphic-d56c3e6f4606\" target=\"_blank\" rel=\"noopener\">Medium Blog</a></p>\n<p><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/34216/3/10689/429660/5ce7f56eE738c9244/5acde7a32fe6bfb2.png\" alt></p>\n<ul>\n<li><code>IDC</code>：Internet Data Center 自建互联网数据中心，通俗讲就是硬件机房，自行维护硬件资源、物理机器、网络环境、机房温控等等等等，在开发阶段完成后，还需要进行繁重且耗时很长的部署过程。对应的就是左侧第一个传统部署的方案。</li>\n<li><code>IaaS</code>：Infrastructure as a Service 基础设施服务，租用公共数据中心的物理机器资源，节省了一部分机器的成本。</li>\n<li><code>PaaS</code>：Platform as a service 平台即服务，软件厂商提供一个平台，使用者只需要接入这个平台，就可以使用服务。</li>\n<li><code>SaaS</code>：Software as a service 软件即服务，面向普通用户，用户只需要购买和使用软件就可以享受这种服务，像 Oracle 和用友财务软件、日常使用的 ERP 系统、办公自动化系统的软件等等，笔者之前所在的公司就是从事这类软件的研发，有固定的人群使用软件解决他们的问题。</li>\n</ul>\n<p>从左到右的演进的过程，我们可以看到的是软件应用架构在这个过程中，一步一步地将环境、硬件、部署、运维与开发进行了分离。</p>\n<p>近期 Pizza as a Service 更新 2.0，将近期火热的 <code>CaaS</code>，<code>FaaS</code> 页加入到其中，如下图：</p>\n<p><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/34915/27/8489/185047/5ce7f648E7236189c/3231bbec723c20d4.jpg\" alt></p>\n<p><code>CaaS</code> 容器即服务，它是基于以 Docker 为主的容器技术，还有由 Google 开源的 Kubernetes（K8S）进行容器自动编排等技术兴起而形成的一个服务架构。它将整个应用拆分成独立的微小的部分，实现快速部署，提供细粒度的微服务。</p>\n<p><code>FaaS</code> 就是 Serverless 中的其中一种方案，也是我们本文关注的重点。</p>\n<hr>\n<p>好了，讲了一些枯燥的概念，那么我们回到我们的目前的工作岗位和内容。</p>\n<h2 id=\"受限\"><a href=\"#受限\" class=\"headerlink\" title=\"受限\"></a>受限</h2><p>作为一名前端工程师，大家日常业务开发的工作内容是什么？</p>\n<p>切图还原业务功能视觉稿；用浏览器脚本去完成交互；调用数据接口、完成业务数据的展现或者操作；开发 UI 组件库；开发工程化共建工具；开发应用系统；参与服务端、客户端所谓<code>大前端</code>的融合；开发一款轻量的客户端游戏等等等等。</p>\n<blockquote>\n<p>这些或许都是作为一名前端工程师的工作内容。<br>笔者日常工作和平时了解到前端工程师大概是以上这些内容，如果有遗漏欢迎补充讨论。</p>\n</blockquote>\n<p>现在请大家<strong>换一个角度思考</strong>，如果我们没有所谓公司的既有平台、如果我们正处创业初期、如果我们是一名独立开发者、如果没有从开发到部署的完善的整套流程、没有 CDN、没有数据接口，我们要如何开发一个动态数据的网站或是一个独立的应用？</p>\n<p>根据以往的经验，在开发业务功能的过程中对于依赖的服务、数据等，我们一般话语权不高，仅仅是服务的使用者，那么我们能成为服务的生产者吗？</p>\n<p>有的朋友会说：“我可以用 NodeJS 写服务，自行维护 SQL、NoSQL 作为数据支撑，在容器构建运行，最终对外提供服务！” <strong>NodeJS</strong> 帮助我们这些善于写 JavaScript 代码的前端工程师，拓宽工作范围和内容，笔者所在的部门内部基于 NodeJS 开发系统和应用都是很好的例子，我们可以写越来越多的服务端逻辑，来直接提供服务。</p>\n<blockquote>\n<p>这里简单提一下 <strong>GragphQL</strong> 这类方案不在本次分享的范围内，它的出现使得数据更具有弹性，但笔者认为 Serverless 的出现让服务的产生更彻底更直接。</p>\n</blockquote>\n<h3 id=\"同样困惑\"><a href=\"#同样困惑\" class=\"headerlink\" title=\"同样困惑\"></a>同样困惑</h3><p>那么，回到文中最开始说的披萨服务模型，如果不借助云服务，就会遇到这样的困惑。要选什么样的容器作为载体，什么配置的硬件机器，几核 CPU、内存、网络带宽；如果选择要选择云服务商云主机，可能有的同学会考虑，去亚马逊、微软、Google Cloud、阿里云、腾讯云、新浪云、华为云、京东云等等这样云厂商这里“选购”各种让人眼花缭乱的“配置组合”的云主机，让人非常苦恼。</p>\n<p>既要为应用规模大小、扩容需求、安装哪一种操作系统、配合哪一种数据库、未来如何组成集群、如何做负载均衡、如何打通开发到部署流程等等等等问题而操心。即便是现在有 Docker、K8S 这样的容器技术和自动编排来辅助，他们虽然可以帮助你做到应用秒级部署，快速重复部署，也依然麻烦，仍然需要付出高昂地运维技术的学习成本，即便你是一个全能达人，你也需要花费大量的时间和精力去解决这些环境和资源的问题，这就对想快速实现一个点子开发出原型或者开发一个小型应用的你来说，像是拦在路上的不得不跨越的一座山，拖慢来你和你团队的行进速度。</p>\n<p><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/31123/30/14938/62110/5cbfd86aE4d298c2d/e4d749fcf8bebbe9.png\" alt></p>\n<h3 id=\"利用率低下\"><a href=\"#利用率低下\" class=\"headerlink\" title=\"利用率低下\"></a>利用率低下</h3><p>绝大部分应用在云主机或虚拟机上线后，其 CPU 利用率、内存使用率、网络带宽的利用率都非常低，因为你在选购过程中就要为未来新增的流量做好缓冲，你的服务一旦 7X24 的上线运行，你就要为这些冗余的运行时产生的费用自掏腰包。我们现如今公司内部的基于私有云架构开发和部署也是如此的问题，都是需要开发者为这些运维相关的技术债务来埋单，有的同学也会经常收到自动监控系统发出的效率低的提示邮件。</p>\n<p>那么既然有这么多困难，我们前端工程师还有机会吗？</p>\n<blockquote>\n<p>希望总是会有的！</p>\n</blockquote>\n<hr>\n<h2 id=\"转变\"><a href=\"#转变\" class=\"headerlink\" title=\"转变\"></a>转变</h2><p><strong>Serverless</strong> 架构的出现，为我们提供了一个窗口。目前还没有一个普遍公认的权威定义，最新的一个定义是这样描述的。</p>\n<blockquote>\n<p>“无服务器架构是基于互联网的系统，其中应用开发不使用常规的服务进程。相反，它们仅依赖于第三方服务，客户端逻辑与托管远程服务之间的调用过程的组合。” – Wiki</p>\n</blockquote>\n<p>这个概念在 2012 年由 <a href=\"https://iron.io/\" target=\"_blank\" rel=\"noopener\">iron.io</a> 公司首先提出，而在 2014 年由 AWS 发布 <strong>Lambda</strong> 时正式商业化使用，目前 AWS 在云计算市场占有率高达 44%（2017 年数据）可以说是业界大佬，同时 Microsoft、Google、IBM 等国际大型 IT 公司都有对应的云产品；在国内，像京东云、阿里云、腾讯云、华为云也都提供了基础的功能，并且据说阿里内部正在力推适合的场景从其他框架向 Serverless 架构转变，从几个阿里前端的 BLOG 、讨论、以及业界大会分享主题来看，可以看到很多人在关注这种架构。</p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/32322/39/14955/68163/5cbfd8ceE6dca5aba/5ec35ad91a639b58.png\" alt></p>\n<h2 id=\"Serverless\"><a href=\"#Serverless\" class=\"headerlink\" title=\"Serverless\"></a>Serverless</h2><p>支持 Serverless 架构的云厂商，允许使用者可以开发服务端逻辑，并将其放在无状态的云计算容器中，由事件来进行触发，其他完全交给云来管理。</p>\n<p>Serverless 分为两种：</p>\n<ul>\n<li><code>BaaS Backend as a Service 后端即服务</code> 如文件存储、数据存储、推送服务、身份统一验证等，我们平时写 NodeJS 或者 Java 都是接触不到的，不是这次讨论的主角。</li>\n<li><code>FaaS Functions as a Service 函数即服务</code> 服务商提供一个平台，提供给用户开发、运行和管理这些函数的功能，而无需搭建和维护基础框架。这是我们关注的<strong>重点</strong>。</li>\n</ul>\n<h3 id=\"FaaS\"><a href=\"#FaaS\" class=\"headerlink\" title=\"FaaS\"></a>FaaS</h3><p><code>FaaS</code> 是一种事件驱动的由消息触发的函数服务。<strong>函数 Function</strong>顾名思义，计算机编程领域上的函数，有着最基础的定义，就是调用函数传入 INPUT 得到输出 OUTPUT，函数内部对于使用者可以是黑盒的，这云计算中也就可以理解成为是一种函数的<strong>服务</strong>。云厂商一般都会集成很多同步或者异步的事件源，通过订阅这些事件，去达到条件触发、定时触发来运行某一个云函数的效果。<code>FaaS</code> 允许我们上传一个完整的函数代码片段，这个函数理论上提供单一的无状态的服务，当事件触发执行这个函数的时候，它会创建实例、启动并开始执行，完成服务后等待被销毁，不存在上下文信息和状态。换言之，就是如果函数不运行，这个实例就不存在，云厂商的计费方式也发生了调整，既然没有实例存在运行，造成损耗，那么就没有产生计费。</p>\n<p>可以直接理解为：只有当你的函数执行的时候才会按照<strong>运行次数</strong>收费，如下图，我们关心的只是应用层中的函数部分！</p>\n<p><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/35669/26/5049/41753/5cbfc82cE3dcdef5a/44cd5664334d3147.png\" alt></p>\n<p>事件触发，给大家举一个类似例子，有一款老牌网络应用：</p>\n<p><strong>IFTTT</strong>：汇聚了世界各种有趣的 API ，通过触发一件、一件事来形成链式的调用完成有趣功能。比如，当你打一辆 Uber 回家的路上，当快到家附近的时候，它会自动触发家里的灯打开，空调开启；比如，你发布一个 Instagram Photo 会自动将图片存储到 Google Photo 或者同步到微博；诸如此类，都是当发生一个事件的时候才去触发下一个事件；FaaS 可以与 BaaS 通过事件订阅来做到联动。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p><code>AWS Lambda</code> <a href=\"https://amazonaws-china.com/cn/lambda/?nc2=h_m1\" target=\"_blank\" rel=\"noopener\">官网文档</a> 和 <code>Google Cloud Functions</code> <a href=\"https://cloud.google.com/functions/use-cases/\" target=\"_blank\" rel=\"noopener\">官网文档</a>，举了几个的应用场景，其中包括物联网 IoT\u000b、独立应用 \u000b、游戏后台服务引擎、\u000b 数据报表（定时）等等。</p>\n<p>貌似看上去离前端有些远，再举一个例子，2018年微信小程序提出的云开发，我个人理解也是对 Serverless 的一次尝试，让拥有开发小程序的工程师，不必依赖传统服务端，而利用云存储、云数据库、云函数来实现自给自足。</p>\n<p>客户端开发，可以自行将数据、文件、信息同步到云端，而又不需要过于操心运维。</p>\n<h4 id=\"DEMO-Express\"><a href=\"#DEMO-Express\" class=\"headerlink\" title=\"DEMO Express\"></a>DEMO Express</h4><p>接触新技术时，工程师们总是喜欢拿来直接上手实验，这里笔者使用 <a href=\"https://serverless.com/\" target=\"_blank\" rel=\"noopener\">serverless.com</a> 提供的 example，做了一个用于 TODO 应用的 server 端，使用 AWS Lambda, API Gateway, DynamoBD, S3 等服务，整体代码只有 200 行，其中 5 个 Function 服务，拥有 CRUD + Query 的功能。</p>\n<p><img src=\"https://img11.360buyimg.com/imagetools/jfs/t1/39852/25/2208/798984/5cbfc813Ef7ba456d/0841958f9f4ad1ba.png\" alt></p>\n<p><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/30962/38/15042/925646/5cbfc807E3572f826/931728f36c3a020e.png\" alt></p>\n<p><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/40122/31/2186/98044/5cbfc86cE71db4f20/d0f40086b6e6adb0.png\" alt></p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/37237/34/5506/283277/5cbfc863Efe309042/627cbcbbd720df24.png\" alt></p>\n<p>如此以来，就拥有服务端的 API 服务，客户端就调用这几个服务，一个简单的 GTD 应用的雏形就已经完成了！</p>\n<h3 id=\"FaaS-优势\"><a href=\"#FaaS-优势\" class=\"headerlink\" title=\"FaaS 优势\"></a>FaaS 优势</h3><p>可以说 AWS Lambda 在市面上探索和发展的最久，用户量最大，<code>Lambda</code> 目前已经可以支持 Python、Java、Go、Ruby、.Net、NodeJS 和自建环境，这几个服务端语言都有自己擅长的场景和成熟的库，可以更方便地去助力完成数据计算、机器学习、图像处理等等工作。</p>\n<ul>\n<li>降低成本（开发、运营成本）</li>\n<li>计费方式按价值付费，不再为 7x24 埋单（即使遇到网络攻击，也可以设定阈值做到合理防护，不至于收到天价账单）</li>\n<li>灵活自动拓展，无需关心扩容缩容问题</li>\n<li>开发人员更专注核心业务</li>\n</ul>\n<h3 id=\"看上去万能？\"><a href=\"#看上去万能？\" class=\"headerlink\" title=\"看上去万能？\"></a>看上去万能？</h3><blockquote>\n<p>No silver bullet. - The Mythical Man-Month</p>\n</blockquote>\n<p>任何解决方案都不是万能的，一定是有它适合的场景，解决适合的问题而存在。</p>\n<h3 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h3><ul>\n<li>启动延迟、不适合长时间运行，支持语言版本更新不及时（AWS NodeJS 8.10）</li>\n<li>没有上下文环境，离线调试困难（serverless offline）</li>\n<li>完全依赖云，貌似是一条无法回头的路（是否一切都要部署到云端，这个一直处在争论中，本文也持中立态度，要分场景适用。）</li>\n<li>函数之间调用，目前还是比较保守的，AWS 已经提供这样的方案，但仍然不想传统服务与服务之间的调用的易用，其中一个非常严重的亟待解决问题，就是为了避免函数之间调用异常从而出现的<code>死循环</code>（函数既要做小，但是如果想提供复杂功能又不得不做的臃肿，这是一个矛盾）</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Serverless 架构带来的价值和挑战是并存的，国内的 Serverless 发展也在初期阶段，它改变了我们开发模式，也改变软件系统的一部分设计，未来发展的好坏，我们无法控制，但是我们可以保持关注，适当尝试。</p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/40014/2/2186/75810/5cbfc87cE68b55b7a/b38bd8b96f8d177f.jpg\" alt></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://aws.amazon.com/cn/serverless/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/cn/serverless/</a></li>\n<li><a href=\"https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/</a></li>\n<li><a href=\"https://jimmysong.io/posts/what-is-serverless/\" target=\"_blank\" rel=\"noopener\">https://jimmysong.io/posts/what-is-serverless/</a></li>\n<li><a href=\"https://serverless.ink/\" target=\"_blank\" rel=\"noopener\">https://serverless.ink/</a></li>\n<li><a href=\"https://serverless.com/\" target=\"_blank\" rel=\"noopener\">https://serverless.com/</a></li>\n<li><a href=\"https://docs.azure.cn/zh-cn/azure-functions/\" target=\"_blank\" rel=\"noopener\">https://docs.azure.cn/zh-cn/azure-functions/</a></li>\n<li><a href=\"https://firebase.google.com/docs/functions/use-cases\" target=\"_blank\" rel=\"noopener\">https://firebase.google.com/docs/functions/use-cases</a></li>\n<li><a href=\"http://jolestar.com/serverless-faas-current-status-and-future/\" target=\"_blank\" rel=\"noopener\">http://jolestar.com/serverless-faas-current-status-and-future/</a></li>\n<li><a href=\"https://www.infoq.cn/article/klfShH_dWU9ooU8idvYD\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/klfShH_dWU9ooU8idvYD</a></li>\n<li><a href=\"https://juejin.im/post/5caf019ff265da039444987b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5caf019ff265da039444987b</a></li>\n<li><a href=\"https://juejin.im/post/5c85b8e45188257dfa07da5c\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5c85b8e45188257dfa07da5c</a></li>\n<li><a href=\"https://github.com/dt-fe/weekly/blob/master/94.%E7%B2%BE%E8%AF%BB%E3%80%8AServerless%20%E7%BB%99%E5%89%8D%E7%AB%AF%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%80%E4%B9%88%E3%80%8B.md\" target=\"_blank\" rel=\"noopener\">https://github.com/dt-fe/weekly/blob/master/serverless.md</a></li>\n</ul>\n","more":"<h2 id=\"云计算热度不减\"><a href=\"#云计算热度不减\" class=\"headerlink\" title=\"云计算热度不减\"></a>云计算热度不减</h2><p>当今社会技术热点一直围绕区块链、AI、机器学习等领域，它们背后离不开云计算的支撑。云计算在经历多年的发展，从基础设施到应用场景拓展和落地方面，都已经取得了长足的进步，大到国家层面的云计算中心纷纷落地，小到商业上各大云服务商和互联网IT厂商纷纷推出各自的云产品。在众多云计算解决方案中，<strong>Serverless</strong> 逐渐崭露头角，受到了很多关注并且发展迅猛，如果你也像笔者一样感兴趣想了解一下的话，那么请继续阅读吧！</p>\n<hr>\n<p>提到云计算的发展，我们可以先来简单了解云计算应用架构在没有出现 Serverless 概念之前的演进过程。</p>\n<h2 id=\"软件应用架构和云服务的演进\"><a href=\"#软件应用架构和云服务的演进\" class=\"headerlink\" title=\"软件应用架构和云服务的演进\"></a>软件应用架构和云服务的演进</h2><p>首先，先来通过一张网络流传很久的 Pizza as a Service 图来了解一下几个缩写，图源来自 <a href=\"https://m.oursky.com/saas-paas-and-iaas-explained-in-one-graphic-d56c3e6f4606\" target=\"_blank\" rel=\"noopener\">Medium Blog</a></p>\n<p><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/34216/3/10689/429660/5ce7f56eE738c9244/5acde7a32fe6bfb2.png\" alt></p>\n<ul>\n<li><code>IDC</code>：Internet Data Center 自建互联网数据中心，通俗讲就是硬件机房，自行维护硬件资源、物理机器、网络环境、机房温控等等等等，在开发阶段完成后，还需要进行繁重且耗时很长的部署过程。对应的就是左侧第一个传统部署的方案。</li>\n<li><code>IaaS</code>：Infrastructure as a Service 基础设施服务，租用公共数据中心的物理机器资源，节省了一部分机器的成本。</li>\n<li><code>PaaS</code>：Platform as a service 平台即服务，软件厂商提供一个平台，使用者只需要接入这个平台，就可以使用服务。</li>\n<li><code>SaaS</code>：Software as a service 软件即服务，面向普通用户，用户只需要购买和使用软件就可以享受这种服务，像 Oracle 和用友财务软件、日常使用的 ERP 系统、办公自动化系统的软件等等，笔者之前所在的公司就是从事这类软件的研发，有固定的人群使用软件解决他们的问题。</li>\n</ul>\n<p>从左到右的演进的过程，我们可以看到的是软件应用架构在这个过程中，一步一步地将环境、硬件、部署、运维与开发进行了分离。</p>\n<p>近期 Pizza as a Service 更新 2.0，将近期火热的 <code>CaaS</code>，<code>FaaS</code> 页加入到其中，如下图：</p>\n<p><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/34915/27/8489/185047/5ce7f648E7236189c/3231bbec723c20d4.jpg\" alt></p>\n<p><code>CaaS</code> 容器即服务，它是基于以 Docker 为主的容器技术，还有由 Google 开源的 Kubernetes（K8S）进行容器自动编排等技术兴起而形成的一个服务架构。它将整个应用拆分成独立的微小的部分，实现快速部署，提供细粒度的微服务。</p>\n<p><code>FaaS</code> 就是 Serverless 中的其中一种方案，也是我们本文关注的重点。</p>\n<hr>\n<p>好了，讲了一些枯燥的概念，那么我们回到我们的目前的工作岗位和内容。</p>\n<h2 id=\"受限\"><a href=\"#受限\" class=\"headerlink\" title=\"受限\"></a>受限</h2><p>作为一名前端工程师，大家日常业务开发的工作内容是什么？</p>\n<p>切图还原业务功能视觉稿；用浏览器脚本去完成交互；调用数据接口、完成业务数据的展现或者操作；开发 UI 组件库；开发工程化共建工具；开发应用系统；参与服务端、客户端所谓<code>大前端</code>的融合；开发一款轻量的客户端游戏等等等等。</p>\n<blockquote>\n<p>这些或许都是作为一名前端工程师的工作内容。<br>笔者日常工作和平时了解到前端工程师大概是以上这些内容，如果有遗漏欢迎补充讨论。</p>\n</blockquote>\n<p>现在请大家<strong>换一个角度思考</strong>，如果我们没有所谓公司的既有平台、如果我们正处创业初期、如果我们是一名独立开发者、如果没有从开发到部署的完善的整套流程、没有 CDN、没有数据接口，我们要如何开发一个动态数据的网站或是一个独立的应用？</p>\n<p>根据以往的经验，在开发业务功能的过程中对于依赖的服务、数据等，我们一般话语权不高，仅仅是服务的使用者，那么我们能成为服务的生产者吗？</p>\n<p>有的朋友会说：“我可以用 NodeJS 写服务，自行维护 SQL、NoSQL 作为数据支撑，在容器构建运行，最终对外提供服务！” <strong>NodeJS</strong> 帮助我们这些善于写 JavaScript 代码的前端工程师，拓宽工作范围和内容，笔者所在的部门内部基于 NodeJS 开发系统和应用都是很好的例子，我们可以写越来越多的服务端逻辑，来直接提供服务。</p>\n<blockquote>\n<p>这里简单提一下 <strong>GragphQL</strong> 这类方案不在本次分享的范围内，它的出现使得数据更具有弹性，但笔者认为 Serverless 的出现让服务的产生更彻底更直接。</p>\n</blockquote>\n<h3 id=\"同样困惑\"><a href=\"#同样困惑\" class=\"headerlink\" title=\"同样困惑\"></a>同样困惑</h3><p>那么，回到文中最开始说的披萨服务模型，如果不借助云服务，就会遇到这样的困惑。要选什么样的容器作为载体，什么配置的硬件机器，几核 CPU、内存、网络带宽；如果选择要选择云服务商云主机，可能有的同学会考虑，去亚马逊、微软、Google Cloud、阿里云、腾讯云、新浪云、华为云、京东云等等这样云厂商这里“选购”各种让人眼花缭乱的“配置组合”的云主机，让人非常苦恼。</p>\n<p>既要为应用规模大小、扩容需求、安装哪一种操作系统、配合哪一种数据库、未来如何组成集群、如何做负载均衡、如何打通开发到部署流程等等等等问题而操心。即便是现在有 Docker、K8S 这样的容器技术和自动编排来辅助，他们虽然可以帮助你做到应用秒级部署，快速重复部署，也依然麻烦，仍然需要付出高昂地运维技术的学习成本，即便你是一个全能达人，你也需要花费大量的时间和精力去解决这些环境和资源的问题，这就对想快速实现一个点子开发出原型或者开发一个小型应用的你来说，像是拦在路上的不得不跨越的一座山，拖慢来你和你团队的行进速度。</p>\n<p><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/31123/30/14938/62110/5cbfd86aE4d298c2d/e4d749fcf8bebbe9.png\" alt></p>\n<h3 id=\"利用率低下\"><a href=\"#利用率低下\" class=\"headerlink\" title=\"利用率低下\"></a>利用率低下</h3><p>绝大部分应用在云主机或虚拟机上线后，其 CPU 利用率、内存使用率、网络带宽的利用率都非常低，因为你在选购过程中就要为未来新增的流量做好缓冲，你的服务一旦 7X24 的上线运行，你就要为这些冗余的运行时产生的费用自掏腰包。我们现如今公司内部的基于私有云架构开发和部署也是如此的问题，都是需要开发者为这些运维相关的技术债务来埋单，有的同学也会经常收到自动监控系统发出的效率低的提示邮件。</p>\n<p>那么既然有这么多困难，我们前端工程师还有机会吗？</p>\n<blockquote>\n<p>希望总是会有的！</p>\n</blockquote>\n<hr>\n<h2 id=\"转变\"><a href=\"#转变\" class=\"headerlink\" title=\"转变\"></a>转变</h2><p><strong>Serverless</strong> 架构的出现，为我们提供了一个窗口。目前还没有一个普遍公认的权威定义，最新的一个定义是这样描述的。</p>\n<blockquote>\n<p>“无服务器架构是基于互联网的系统，其中应用开发不使用常规的服务进程。相反，它们仅依赖于第三方服务，客户端逻辑与托管远程服务之间的调用过程的组合。” – Wiki</p>\n</blockquote>\n<p>这个概念在 2012 年由 <a href=\"https://iron.io/\" target=\"_blank\" rel=\"noopener\">iron.io</a> 公司首先提出，而在 2014 年由 AWS 发布 <strong>Lambda</strong> 时正式商业化使用，目前 AWS 在云计算市场占有率高达 44%（2017 年数据）可以说是业界大佬，同时 Microsoft、Google、IBM 等国际大型 IT 公司都有对应的云产品；在国内，像京东云、阿里云、腾讯云、华为云也都提供了基础的功能，并且据说阿里内部正在力推适合的场景从其他框架向 Serverless 架构转变，从几个阿里前端的 BLOG 、讨论、以及业界大会分享主题来看，可以看到很多人在关注这种架构。</p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/32322/39/14955/68163/5cbfd8ceE6dca5aba/5ec35ad91a639b58.png\" alt></p>\n<h2 id=\"Serverless\"><a href=\"#Serverless\" class=\"headerlink\" title=\"Serverless\"></a>Serverless</h2><p>支持 Serverless 架构的云厂商，允许使用者可以开发服务端逻辑，并将其放在无状态的云计算容器中，由事件来进行触发，其他完全交给云来管理。</p>\n<p>Serverless 分为两种：</p>\n<ul>\n<li><code>BaaS Backend as a Service 后端即服务</code> 如文件存储、数据存储、推送服务、身份统一验证等，我们平时写 NodeJS 或者 Java 都是接触不到的，不是这次讨论的主角。</li>\n<li><code>FaaS Functions as a Service 函数即服务</code> 服务商提供一个平台，提供给用户开发、运行和管理这些函数的功能，而无需搭建和维护基础框架。这是我们关注的<strong>重点</strong>。</li>\n</ul>\n<h3 id=\"FaaS\"><a href=\"#FaaS\" class=\"headerlink\" title=\"FaaS\"></a>FaaS</h3><p><code>FaaS</code> 是一种事件驱动的由消息触发的函数服务。<strong>函数 Function</strong>顾名思义，计算机编程领域上的函数，有着最基础的定义，就是调用函数传入 INPUT 得到输出 OUTPUT，函数内部对于使用者可以是黑盒的，这云计算中也就可以理解成为是一种函数的<strong>服务</strong>。云厂商一般都会集成很多同步或者异步的事件源，通过订阅这些事件，去达到条件触发、定时触发来运行某一个云函数的效果。<code>FaaS</code> 允许我们上传一个完整的函数代码片段，这个函数理论上提供单一的无状态的服务，当事件触发执行这个函数的时候，它会创建实例、启动并开始执行，完成服务后等待被销毁，不存在上下文信息和状态。换言之，就是如果函数不运行，这个实例就不存在，云厂商的计费方式也发生了调整，既然没有实例存在运行，造成损耗，那么就没有产生计费。</p>\n<p>可以直接理解为：只有当你的函数执行的时候才会按照<strong>运行次数</strong>收费，如下图，我们关心的只是应用层中的函数部分！</p>\n<p><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/35669/26/5049/41753/5cbfc82cE3dcdef5a/44cd5664334d3147.png\" alt></p>\n<p>事件触发，给大家举一个类似例子，有一款老牌网络应用：</p>\n<p><strong>IFTTT</strong>：汇聚了世界各种有趣的 API ，通过触发一件、一件事来形成链式的调用完成有趣功能。比如，当你打一辆 Uber 回家的路上，当快到家附近的时候，它会自动触发家里的灯打开，空调开启；比如，你发布一个 Instagram Photo 会自动将图片存储到 Google Photo 或者同步到微博；诸如此类，都是当发生一个事件的时候才去触发下一个事件；FaaS 可以与 BaaS 通过事件订阅来做到联动。</p>\n<h3 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h3><p><code>AWS Lambda</code> <a href=\"https://amazonaws-china.com/cn/lambda/?nc2=h_m1\" target=\"_blank\" rel=\"noopener\">官网文档</a> 和 <code>Google Cloud Functions</code> <a href=\"https://cloud.google.com/functions/use-cases/\" target=\"_blank\" rel=\"noopener\">官网文档</a>，举了几个的应用场景，其中包括物联网 IoT\u000b、独立应用 \u000b、游戏后台服务引擎、\u000b 数据报表（定时）等等。</p>\n<p>貌似看上去离前端有些远，再举一个例子，2018年微信小程序提出的云开发，我个人理解也是对 Serverless 的一次尝试，让拥有开发小程序的工程师，不必依赖传统服务端，而利用云存储、云数据库、云函数来实现自给自足。</p>\n<p>客户端开发，可以自行将数据、文件、信息同步到云端，而又不需要过于操心运维。</p>\n<h4 id=\"DEMO-Express\"><a href=\"#DEMO-Express\" class=\"headerlink\" title=\"DEMO Express\"></a>DEMO Express</h4><p>接触新技术时，工程师们总是喜欢拿来直接上手实验，这里笔者使用 <a href=\"https://serverless.com/\" target=\"_blank\" rel=\"noopener\">serverless.com</a> 提供的 example，做了一个用于 TODO 应用的 server 端，使用 AWS Lambda, API Gateway, DynamoBD, S3 等服务，整体代码只有 200 行，其中 5 个 Function 服务，拥有 CRUD + Query 的功能。</p>\n<p><img src=\"https://img11.360buyimg.com/imagetools/jfs/t1/39852/25/2208/798984/5cbfc813Ef7ba456d/0841958f9f4ad1ba.png\" alt></p>\n<p><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/30962/38/15042/925646/5cbfc807E3572f826/931728f36c3a020e.png\" alt></p>\n<p><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/40122/31/2186/98044/5cbfc86cE71db4f20/d0f40086b6e6adb0.png\" alt></p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/37237/34/5506/283277/5cbfc863Efe309042/627cbcbbd720df24.png\" alt></p>\n<p>如此以来，就拥有服务端的 API 服务，客户端就调用这几个服务，一个简单的 GTD 应用的雏形就已经完成了！</p>\n<h3 id=\"FaaS-优势\"><a href=\"#FaaS-优势\" class=\"headerlink\" title=\"FaaS 优势\"></a>FaaS 优势</h3><p>可以说 AWS Lambda 在市面上探索和发展的最久，用户量最大，<code>Lambda</code> 目前已经可以支持 Python、Java、Go、Ruby、.Net、NodeJS 和自建环境，这几个服务端语言都有自己擅长的场景和成熟的库，可以更方便地去助力完成数据计算、机器学习、图像处理等等工作。</p>\n<ul>\n<li>降低成本（开发、运营成本）</li>\n<li>计费方式按价值付费，不再为 7x24 埋单（即使遇到网络攻击，也可以设定阈值做到合理防护，不至于收到天价账单）</li>\n<li>灵活自动拓展，无需关心扩容缩容问题</li>\n<li>开发人员更专注核心业务</li>\n</ul>\n<h3 id=\"看上去万能？\"><a href=\"#看上去万能？\" class=\"headerlink\" title=\"看上去万能？\"></a>看上去万能？</h3><blockquote>\n<p>No silver bullet. - The Mythical Man-Month</p>\n</blockquote>\n<p>任何解决方案都不是万能的，一定是有它适合的场景，解决适合的问题而存在。</p>\n<h3 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h3><ul>\n<li>启动延迟、不适合长时间运行，支持语言版本更新不及时（AWS NodeJS 8.10）</li>\n<li>没有上下文环境，离线调试困难（serverless offline）</li>\n<li>完全依赖云，貌似是一条无法回头的路（是否一切都要部署到云端，这个一直处在争论中，本文也持中立态度，要分场景适用。）</li>\n<li>函数之间调用，目前还是比较保守的，AWS 已经提供这样的方案，但仍然不想传统服务与服务之间的调用的易用，其中一个非常严重的亟待解决问题，就是为了避免函数之间调用异常从而出现的<code>死循环</code>（函数既要做小，但是如果想提供复杂功能又不得不做的臃肿，这是一个矛盾）</li>\n</ul>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Serverless 架构带来的价值和挑战是并存的，国内的 Serverless 发展也在初期阶段，它改变了我们开发模式，也改变软件系统的一部分设计，未来发展的好坏，我们无法控制，但是我们可以保持关注，适当尝试。</p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/40014/2/2186/75810/5cbfc87cE68b55b7a/b38bd8b96f8d177f.jpg\" alt></p>\n<h3 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h3><ul>\n<li><a href=\"https://aws.amazon.com/cn/serverless/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/cn/serverless/</a></li>\n<li><a href=\"https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/</a></li>\n<li><a href=\"https://jimmysong.io/posts/what-is-serverless/\" target=\"_blank\" rel=\"noopener\">https://jimmysong.io/posts/what-is-serverless/</a></li>\n<li><a href=\"https://serverless.ink/\" target=\"_blank\" rel=\"noopener\">https://serverless.ink/</a></li>\n<li><a href=\"https://serverless.com/\" target=\"_blank\" rel=\"noopener\">https://serverless.com/</a></li>\n<li><a href=\"https://docs.azure.cn/zh-cn/azure-functions/\" target=\"_blank\" rel=\"noopener\">https://docs.azure.cn/zh-cn/azure-functions/</a></li>\n<li><a href=\"https://firebase.google.com/docs/functions/use-cases\" target=\"_blank\" rel=\"noopener\">https://firebase.google.com/docs/functions/use-cases</a></li>\n<li><a href=\"http://jolestar.com/serverless-faas-current-status-and-future/\" target=\"_blank\" rel=\"noopener\">http://jolestar.com/serverless-faas-current-status-and-future/</a></li>\n<li><a href=\"https://www.infoq.cn/article/klfShH_dWU9ooU8idvYD\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/klfShH_dWU9ooU8idvYD</a></li>\n<li><a href=\"https://juejin.im/post/5caf019ff265da039444987b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5caf019ff265da039444987b</a></li>\n<li><a href=\"https://juejin.im/post/5c85b8e45188257dfa07da5c\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5c85b8e45188257dfa07da5c</a></li>\n<li><a href=\"https://github.com/dt-fe/weekly/blob/master/94.%E7%B2%BE%E8%AF%BB%E3%80%8AServerless%20%E7%BB%99%E5%89%8D%E7%AB%AF%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%80%E4%B9%88%E3%80%8B.md\" target=\"_blank\" rel=\"noopener\">https://github.com/dt-fe/weekly/blob/master/serverless.md</a></li>\n</ul>","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"Cloud","path":"api/tags/Cloud.json"},{"name":"Serverless","path":"api/tags/Serverless.json"},{"name":"Server","path":"api/tags/Server.json"}]}