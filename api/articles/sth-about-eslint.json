{"title":"ESLint 修改点整理","slug":"sth-about-eslint","date":"2020-06-03T13:39:00.000Z","updated":"2020-07-05T08:57:39.171Z","comments":true,"path":"api/articles/sth-about-eslint.json","excerpt":"ESLint 为团队和项目带来的益处，这里不多说，本文主要是个人近期修改项目代码一些错误修改整理的内容。备注：尽量使用默认 Prettier 规则，根据实际情况略有调整。项目技术栈 React, Redux, Redux-Sagas, TypeScript。","covers":null,"content":"<!-- ## ESLint 修改点整理 -->\n<p>ESLint 为团队和项目带来的益处，这里不多说，本文主要是个人近期修改项目代码一些错误修改整理的内容。</p>\n<blockquote>\n<p>备注：尽量使用默认 Prettier 规则，根据实际情况略有调整。项目技术栈 React, Redux, Redux-Sagas, TypeScript。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h3 id=\"Plugin-列表\"><a href=\"#Plugin-列表\" class=\"headerlink\" title=\"Plugin 列表\"></a>Plugin 列表</h3><ul>\n<li><code>&quot;plugin:react/recommended&quot;</code></li>\n<li><code>&quot;plugin:@typescript-eslint/recommended&quot;</code></li>\n<li><code>&quot;prettier/@typescript-eslint&quot;</code></li>\n<li><code>&quot;plugin:prettier/recommended&quot;</code></li>\n</ul>\n<h3 id=\"ERROR-List\"><a href=\"#ERROR-List\" class=\"headerlink\" title=\"ERROR List\"></a>ERROR List</h3><ul>\n<li><p>[Error] eslint@typescript-eslint/ban-ts-comment</p>\n<p>Do not use “// @ts-nocheck” because it alters compilation errors. <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/v3.0.1/packages/eslint-plugin/docs/rules/ban-ts-comment.md\" target=\"_blank\" rel=\"noopener\">Desc link</a></p>\n<p>TypeScript 提供 <code>@ts-expect-error @ts-ignore @ts-nocheck @ts-check</code> 指令注释方式，用来改变 tsc 编译时处理文件的方式，如果大量使用此类注释影响 TypeScript 的特性，既然使用 ts 就要拥抱它的特性，lint 中默认对 <code>no-check</code> 会按照 <code>error</code> 进行提示；可以根据实际情况调整规则，改为 <code>warn</code>。</p>\n</li>\n<li><p>[Error] @typescript-eslint/ban-types</p>\n<p><a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/v3.0.1/packages/eslint-plugin/docs/rules/ban-types.md\" target=\"_blank\" rel=\"noopener\">Desc Link</a></p>\n<p>补充提示：</p>\n</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Don't use <span class=\"code\">`&#123;&#125;`</span> as a type. <span class=\"code\">`&#123;&#125;`</span> actually means \"any non-nullish value\".</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">- </span>If you want a type meaning \"any object\", you probably want <span class=\"code\">`Record&lt;string, unknown&gt;`</span> instead.</span><br><span class=\"line\"><span class=\"bullet\">- </span>If you want a type meaning \"any value\", you probably want <span class=\"code\">`unknown`</span> instead.</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>[Error] react/jsx-no-target-blank</p>\n<p><a href=\"https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md\" target=\"_blank\" rel=\"noopener\">Desc Link</a></p>\n<p>出于安全考虑，React 中产生新打开页面的链接，需要增加 <code>rel=&#39;noreferrer&#39;</code> 用来保护原站。具体说明详见：<a href=\"https://html.spec.whatwg.org/multipage/links.html#link-type-noopener\" target=\"_blank\" rel=\"noopener\">Link</a></p>\n</li>\n</ul>\n<h3 id=\"WARN-List\"><a href=\"#WARN-List\" class=\"headerlink\" title=\"WARN List\"></a>WARN List</h3><ul>\n<li><p>[Warn] Missing return type on function.eslint@typescript-eslint/explicit-module-boundary-types</p>\n<p><a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/v3.0.1/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.md\" target=\"_blank\" rel=\"noopener\">desc link</a><br>说明：针对函数的定义，建议每一个函数都要显式的表明函数返回值。这在 <code>*.jsx, *.tsx</code> 文件中，React 生命周期函数都提示，可以使用 eslint overrides 规则，只针对 <code>*.js, *.ts</code> 生效。</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">    // disable the rule for all files</span><br><span class=\"line\">    \"@typescript-eslint/explicit-module-boundary-types\": \"off\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"overrides\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      // enable the rule specifically for TypeScript files</span><br><span class=\"line\">      \"files\": [\"*.js\", \"*.ts\"],</span><br><span class=\"line\">      \"rules\": &#123;</span><br><span class=\"line\">        \"@typescript-eslint/explicit-module-boundary-types\": \"warn\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>[Warn] @typescript-eslint/no-unused-vars</li>\n</ul>\n<p>应该是最经常遇到的一个警告，定义了变量，下文没有使用。</p>\n<p><strong>个人建议：非关键算法或逻辑代码，当你阅读时没用，就删掉吧，可以保留注释，因为即使你想保留这段代码，以备不时之需，但是真到需要用到代码你再次阅读的时候，实现思路以及上下文联系可能已经相差很远。</strong></p>\n<h3 id=\"Prettier-细节\"><a href=\"#Prettier-细节\" class=\"headerlink\" title=\"Prettier 细节\"></a>Prettier 细节</h3><ul>\n<li>关于默认逗号的变化 <a href=\"https://prettier.io/docs/en/options.html#trailing-commas\" target=\"_blank\" rel=\"noopener\">link</a></li>\n</ul>\n<p><code>Prettier</code> 自动 v2.0.0 开始，将 <code>trailingComma</code> 默认配置由 <code>none</code> 改为 <code>es5</code>，在我看来是一种很好的方式。</p>\n<p>举个例子，当 import 多个内容、一个对象需要增加属性、一个数组追加元素，如果默认已经追加了逗号，那么就可以直接追加，而不必要移动光标去前一行手动增加一个逗号，这样就增加了一些便利性，与此同时便于快速定位甚至避免由于一个逗号的引起的错误。</p>\n<h4 id=\"TS2322-自定义属性\"><a href=\"#TS2322-自定义属性\" class=\"headerlink\" title=\"TS2322 自定义属性\"></a>TS2322 自定义属性</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; AriaAttributes, DOMAttributes &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">module</span> \"react\" &#123;</span><br><span class=\"line\">  <span class=\"keyword\">interface</span> HTMLAttributes&lt;T&gt; <span class=\"keyword\">extends</span> AriaAttributes, DOMAttributes&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// extends React's HTMLAttributes</span></span><br><span class=\"line\">    custom?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://dev.to/lukethacoder/use-custom-html-attribute-s-in-typescript-2co\" target=\"_blank\" rel=\"noopener\">https://dev.to/lukethacoder/use-custom-html-attribute-s-in-typescript-2co</a></p>\n<h4 id=\"TS2679\"><a href=\"#TS2679\" class=\"headerlink\" title=\"TS2679\"></a>TS2679</h4><p>问题实例片段代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">loadSimilar</span>(<span class=\"params\">skuId: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span>: ActionTypes.REQUEST_SIMILAR.PENDING,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">yield</span> API.querySimilar(skuId);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">      <span class=\"keyword\">type</span>: ActionTypes.REQUEST_SIMILAR.SUCCESS,</span><br><span class=\"line\">      data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">      <span class=\"keyword\">type</span>: ActionTypes.REQUEST_SIMILAR.FAILURE,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchSimilar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> takeEvery(ActionTypes.LOAD_SIMILAR, loadSimilar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改后代码：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- function* loadSimilar(skuId: string) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+ function* loadSimilar(&#123; skuId &#125;: &#123; type: string; skuId: string &#125;) &#123;</span></span><br><span class=\"line\">  yield put(&#123;</span><br><span class=\"line\">    type: ActionTypes.REQUEST_SIMILAR.PENDING,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    const &#123; data &#125; = yield API.querySimilar(skuId);</span><br><span class=\"line\">    yield put(&#123;</span><br><span class=\"line\">      type: ActionTypes.REQUEST_SIMILAR.SUCCESS,</span><br><span class=\"line\">      data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; catch (error) &#123;</span><br><span class=\"line\">    yield put(&#123;</span><br><span class=\"line\">      type: ActionTypes.REQUEST_SIMILAR.FAILURE,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function* watchSimilar() &#123;</span><br><span class=\"line\">  yield takeEvery(ActionTypes.LOAD_SIMILAR, loadSimilar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解答：Redux-Saga 中 takeEvery 第二个参数是一个 action，所以定义 loadSimilar 时候需要遵循 <code>TakeableChannel&lt;unknown&gt;</code> ，定义 type。<br>参考：<a href=\"https://stackoverflow.com/a/60558041\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/60558041</a></p>\n<p><strong>切记，保证一路传递参数变量匹配，否则会出现无法赋值问题，例如下面代码：</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- function* cartOptCheckOne(&#123; param &#125;: &#123; type: string; param: any &#125;) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+ function* cartOptCheckOne(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   // type = ActionTypes.OPT_CARTCHECKONE,</span></span><br><span class=\"line\"><span class=\"addition\">+   RequestParam,</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   type: string;</span></span><br><span class=\"line\"><span class=\"addition\">+   RequestParam: any;</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;) &#123;</span></span><br></pre></td></tr></table></figure>\n<p>外层触发 action 传参数代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.props.optCartCheckOne(&#123;</span><br><span class=\"line\">  RequestParam: requestParam,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果定义 cartOptCheckOne 使用 param 就会导致传递过程中因为变量名称不同无法解构，导致传参中断。</p>\n<h2 id=\"ESLint-Config\"><a href=\"#ESLint-Config\" class=\"headerlink\" title=\"ESLint Config\"></a>ESLint Config</h2><p>参考 <a href=\"https://www.robertcooper.me/using-eslint-and-prettier-in-a-typescript-project\" target=\"_blank\" rel=\"noopener\">https://www.robertcooper.me/using-eslint-and-prettier-in-a-typescript-project</a></p>\n","more":"<h3 id=\"Plugin-列表\"><a href=\"#Plugin-列表\" class=\"headerlink\" title=\"Plugin 列表\"></a>Plugin 列表</h3><ul>\n<li><code>&quot;plugin:react/recommended&quot;</code></li>\n<li><code>&quot;plugin:@typescript-eslint/recommended&quot;</code></li>\n<li><code>&quot;prettier/@typescript-eslint&quot;</code></li>\n<li><code>&quot;plugin:prettier/recommended&quot;</code></li>\n</ul>\n<h3 id=\"ERROR-List\"><a href=\"#ERROR-List\" class=\"headerlink\" title=\"ERROR List\"></a>ERROR List</h3><ul>\n<li><p>[Error] eslint@typescript-eslint/ban-ts-comment</p>\n<p>Do not use “// @ts-nocheck” because it alters compilation errors. <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/v3.0.1/packages/eslint-plugin/docs/rules/ban-ts-comment.md\" target=\"_blank\" rel=\"noopener\">Desc link</a></p>\n<p>TypeScript 提供 <code>@ts-expect-error @ts-ignore @ts-nocheck @ts-check</code> 指令注释方式，用来改变 tsc 编译时处理文件的方式，如果大量使用此类注释影响 TypeScript 的特性，既然使用 ts 就要拥抱它的特性，lint 中默认对 <code>no-check</code> 会按照 <code>error</code> 进行提示；可以根据实际情况调整规则，改为 <code>warn</code>。</p>\n</li>\n<li><p>[Error] @typescript-eslint/ban-types</p>\n<p><a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/v3.0.1/packages/eslint-plugin/docs/rules/ban-types.md\" target=\"_blank\" rel=\"noopener\">Desc Link</a></p>\n<p>补充提示：</p>\n</li>\n</ul>\n<figure class=\"highlight md\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Don't use <span class=\"code\">`&#123;&#125;`</span> as a type. <span class=\"code\">`&#123;&#125;`</span> actually means \"any non-nullish value\".</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"bullet\">- </span>If you want a type meaning \"any object\", you probably want <span class=\"code\">`Record&lt;string, unknown&gt;`</span> instead.</span><br><span class=\"line\"><span class=\"bullet\">- </span>If you want a type meaning \"any value\", you probably want <span class=\"code\">`unknown`</span> instead.</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>[Error] react/jsx-no-target-blank</p>\n<p><a href=\"https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules/jsx-no-target-blank.md\" target=\"_blank\" rel=\"noopener\">Desc Link</a></p>\n<p>出于安全考虑，React 中产生新打开页面的链接，需要增加 <code>rel=&#39;noreferrer&#39;</code> 用来保护原站。具体说明详见：<a href=\"https://html.spec.whatwg.org/multipage/links.html#link-type-noopener\" target=\"_blank\" rel=\"noopener\">Link</a></p>\n</li>\n</ul>\n<h3 id=\"WARN-List\"><a href=\"#WARN-List\" class=\"headerlink\" title=\"WARN List\"></a>WARN List</h3><ul>\n<li><p>[Warn] Missing return type on function.eslint@typescript-eslint/explicit-module-boundary-types</p>\n<p><a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/v3.0.1/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.md\" target=\"_blank\" rel=\"noopener\">desc link</a><br>说明：针对函数的定义，建议每一个函数都要显式的表明函数返回值。这在 <code>*.jsx, *.tsx</code> 文件中，React 生命周期函数都提示，可以使用 eslint overrides 规则，只针对 <code>*.js, *.ts</code> 生效。</p>\n</li>\n</ul>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"rules\"</span>: &#123;</span><br><span class=\"line\">    // disable the rule for all files</span><br><span class=\"line\">    \"@typescript-eslint/explicit-module-boundary-types\": \"off\"</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  \"overrides\": [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      // enable the rule specifically for TypeScript files</span><br><span class=\"line\">      \"files\": [\"*.js\", \"*.ts\"],</span><br><span class=\"line\">      \"rules\": &#123;</span><br><span class=\"line\">        \"@typescript-eslint/explicit-module-boundary-types\": \"warn\"</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>[Warn] @typescript-eslint/no-unused-vars</li>\n</ul>\n<p>应该是最经常遇到的一个警告，定义了变量，下文没有使用。</p>\n<p><strong>个人建议：非关键算法或逻辑代码，当你阅读时没用，就删掉吧，可以保留注释，因为即使你想保留这段代码，以备不时之需，但是真到需要用到代码你再次阅读的时候，实现思路以及上下文联系可能已经相差很远。</strong></p>\n<h3 id=\"Prettier-细节\"><a href=\"#Prettier-细节\" class=\"headerlink\" title=\"Prettier 细节\"></a>Prettier 细节</h3><ul>\n<li>关于默认逗号的变化 <a href=\"https://prettier.io/docs/en/options.html#trailing-commas\" target=\"_blank\" rel=\"noopener\">link</a></li>\n</ul>\n<p><code>Prettier</code> 自动 v2.0.0 开始，将 <code>trailingComma</code> 默认配置由 <code>none</code> 改为 <code>es5</code>，在我看来是一种很好的方式。</p>\n<p>举个例子，当 import 多个内容、一个对象需要增加属性、一个数组追加元素，如果默认已经追加了逗号，那么就可以直接追加，而不必要移动光标去前一行手动增加一个逗号，这样就增加了一些便利性，与此同时便于快速定位甚至避免由于一个逗号的引起的错误。</p>\n<h4 id=\"TS2322-自定义属性\"><a href=\"#TS2322-自定义属性\" class=\"headerlink\" title=\"TS2322 自定义属性\"></a>TS2322 自定义属性</h4><figure class=\"highlight typescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; AriaAttributes, DOMAttributes &#125; <span class=\"keyword\">from</span> <span class=\"string\">\"react\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">declare</span> <span class=\"keyword\">module</span> \"react\" &#123;</span><br><span class=\"line\">  <span class=\"keyword\">interface</span> HTMLAttributes&lt;T&gt; <span class=\"keyword\">extends</span> AriaAttributes, DOMAttributes&lt;T&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// extends React's HTMLAttributes</span></span><br><span class=\"line\">    custom?: <span class=\"built_in\">string</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://dev.to/lukethacoder/use-custom-html-attribute-s-in-typescript-2co\" target=\"_blank\" rel=\"noopener\">https://dev.to/lukethacoder/use-custom-html-attribute-s-in-typescript-2co</a></p>\n<h4 id=\"TS2679\"><a href=\"#TS2679\" class=\"headerlink\" title=\"TS2679\"></a>TS2679</h4><p>问题实例片段代码：</p>\n<figure class=\"highlight ts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">loadSimilar</span>(<span class=\"params\">skuId: <span class=\"built_in\">string</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">    <span class=\"keyword\">type</span>: ActionTypes.REQUEST_SIMILAR.PENDING,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> &#123; data &#125; = <span class=\"keyword\">yield</span> API.querySimilar(skuId);</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">      <span class=\"keyword\">type</span>: ActionTypes.REQUEST_SIMILAR.SUCCESS,</span><br><span class=\"line\">      data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; <span class=\"keyword\">catch</span> (error) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">yield</span> put(&#123;</span><br><span class=\"line\">      <span class=\"keyword\">type</span>: ActionTypes.REQUEST_SIMILAR.FAILURE,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span>* <span class=\"title\">watchSimilar</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">yield</span> takeEvery(ActionTypes.LOAD_SIMILAR, loadSimilar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改后代码：</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- function* loadSimilar(skuId: string) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+ function* loadSimilar(&#123; skuId &#125;: &#123; type: string; skuId: string &#125;) &#123;</span></span><br><span class=\"line\">  yield put(&#123;</span><br><span class=\"line\">    type: ActionTypes.REQUEST_SIMILAR.PENDING,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  try &#123;</span><br><span class=\"line\">    const &#123; data &#125; = yield API.querySimilar(skuId);</span><br><span class=\"line\">    yield put(&#123;</span><br><span class=\"line\">      type: ActionTypes.REQUEST_SIMILAR.SUCCESS,</span><br><span class=\"line\">      data,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125; catch (error) &#123;</span><br><span class=\"line\">    yield put(&#123;</span><br><span class=\"line\">      type: ActionTypes.REQUEST_SIMILAR.FAILURE,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function* watchSimilar() &#123;</span><br><span class=\"line\">  yield takeEvery(ActionTypes.LOAD_SIMILAR, loadSimilar);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>解答：Redux-Saga 中 takeEvery 第二个参数是一个 action，所以定义 loadSimilar 时候需要遵循 <code>TakeableChannel&lt;unknown&gt;</code> ，定义 type。<br>参考：<a href=\"https://stackoverflow.com/a/60558041\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/a/60558041</a></p>\n<p><strong>切记，保证一路传递参数变量匹配，否则会出现无法赋值问题，例如下面代码：</strong></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- function* cartOptCheckOne(&#123; param &#125;: &#123; type: string; param: any &#125;) &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+ function* cartOptCheckOne(&#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   // type = ActionTypes.OPT_CARTCHECKONE,</span></span><br><span class=\"line\"><span class=\"addition\">+   RequestParam,</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;: &#123;</span></span><br><span class=\"line\"><span class=\"addition\">+   type: string;</span></span><br><span class=\"line\"><span class=\"addition\">+   RequestParam: any;</span></span><br><span class=\"line\"><span class=\"addition\">+ &#125;) &#123;</span></span><br></pre></td></tr></table></figure>\n<p>外层触发 action 传参数代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.props.optCartCheckOne(&#123;</span><br><span class=\"line\">  RequestParam: requestParam,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果定义 cartOptCheckOne 使用 param 就会导致传递过程中因为变量名称不同无法解构，导致传参中断。</p>\n<h2 id=\"ESLint-Config\"><a href=\"#ESLint-Config\" class=\"headerlink\" title=\"ESLint Config\"></a>ESLint Config</h2><p>参考 <a href=\"https://www.robertcooper.me/using-eslint-and-prettier-in-a-typescript-project\" target=\"_blank\" rel=\"noopener\">https://www.robertcooper.me/using-eslint-and-prettier-in-a-typescript-project</a></p>","categories":[{"name":"前端技术","path":"api/categories/前端技术.json"}],"tags":[{"name":"Front-End","path":"api/tags/Front-End.json"},{"name":"React","path":"api/tags/React.json"},{"name":"ESLint","path":"api/tags/ESLint.json"},{"name":"TypeScript","path":"api/tags/TypeScript.json"}]}