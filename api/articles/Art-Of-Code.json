{"title":"代码的艺术 - 章淼讲座笔记","slug":"Art-Of-Code","date":"2018-10-08T02:41:48.000Z","updated":"2018-10-08T02:04:33.365Z","comments":true,"path":"api/articles/Art-Of-Code.json","excerpt":"适合新手和正在努力进阶的高年级同学阅读 :)","covers":null,"content":"<p>适合新手和正在努力进阶的高年级同学阅读 :)</p>\n<a id=\"more\"></a>\n<h2 id=\"工程师的内功修炼\"><a href=\"#工程师的内功修炼\" class=\"headerlink\" title=\"工程师的内功修炼\"></a>工程师的内功修炼</h2><h3 id=\"章淼-简介\"><a href=\"#章淼-简介\" class=\"headerlink\" title=\"章淼 简介\"></a>章淼 简介</h3><p>清华大学计算机博士；百度云前端技术负责人；百度 <code>Golang</code> &amp; <code>Python</code> 技术委员会成员；</p>\n<h3 id=\"笔记\"><a href=\"#笔记\" class=\"headerlink\" title=\"笔记\"></a>笔记</h3><p>对比 Google 的工程师，国内的工程师写代码的占用时间显然过多了，而不太注重提前<strong>设计</strong>；Google 工程师们在开始实现某一模块或功能时，会事先在代码库中搜索是否已经有可重用的代码，并且代码库中的代码具有完整的注释和文档。</p>\n<h4 id=\"提前设计的重要性\"><a href=\"#提前设计的重要性\" class=\"headerlink\" title=\"提前设计的重要性\"></a>提前设计的重要性</h4><p>尽可能地<strong>提前</strong>完成两个<strong>文档</strong></p>\n<ul>\n<li>需求分析文档</li>\n<li>系统设计文档</li>\n</ul>\n<p>原因：在未启动实现细节代码之前构思设计时发现问题的修改，对比后期真正已经开始 Coding 的时候，对比发现问题进行修改，成本要低很多。文档一般只写主要逻辑，而代码涉及更多细节。</p>\n<blockquote>\n<p>笔者备注：但这不是绝对的，修改是正常的，不要惧怕修改，反复尝试积累经验。</p>\n</blockquote>\n<ul>\n<li>需求分析文档：主要是在定义黑盒状态，描述外在，描述 WHAT 要做什么？</li>\n<li>系统设计文档：主要实在定义白盒状态，描述内在，描述 HOW 怎么做？</li>\n</ul>\n<p>两者要有区分，不要<strong>混淆</strong>，也不要混在一起写！</p>\n<ul>\n<li>需求分析文档的误区<br>不要过早提前构想实现细节，我们的大脑会下意识地在我们构想如何实现时遇到的各种难题，而将原本的需求分析的思考挂起；举例：导弹 vs 炸弹，两者都有摧毁目标的能力，但是很明显导弹的价值更高，重要的是制导的功能，而不是爆炸本身。</li>\n<li>系统设计文档的误区<br>主要要写定义系统的架构、模块、接口、数据、关键算法、设计思路等等得过程记录。</li>\n</ul>\n<h5 id=\"系统架构要写什么以及方法\"><a href=\"#系统架构要写什么以及方法\" class=\"headerlink\" title=\"系统架构要写什么以及方法\"></a>系统架构要写什么以及方法</h5><p>概念、模型、视图等等。</p>\n<ul>\n<li>静：系统静态的样子，功能模块如何划分等</li>\n<li>动：系统运转起来，各模块联动起来的样子</li>\n<li><p>细：不同角度，不同层次去描述</p>\n</li>\n<li><p>每一个组件（模块、函数）保证单一性，<strong>Single purpose. 只做一件事！</strong></p>\n</li>\n<li>轻耦合，低内聚（避免全局变量（多处操作难以控制））</li>\n<li>当前系统设计所受到的约束（当前设计的瓶颈在哪？比如网络、吞吐量、占用 CPU 或文件位置资源等）</li>\n<li>需求分析是系统设计的来源</li>\n<li>模型和抽象的思维能力很重要（涉及概念：模型、数据结构、算法等等）</li>\n</ul>\n<h5 id=\"设计接口（Interface）要注意什么？\"><a href=\"#设计接口（Interface）要注意什么？\" class=\"headerlink\" title=\"设计接口（Interface）要注意什么？\"></a>设计接口（Interface）要注意什么？</h5><ul>\n<li>接口定义系统外在的功能</li>\n<li>接口定义当前系统与外部系统之间的关系</li>\n</ul>\n<p>接口 Interface 定义了系统对外的接口，往往比系统实现内部细节代码更重要，不要过于草率，因为一旦定义了接口，提供出去给调用方使用，想修改就太难了。所以设计接口有重要原则，站在使用者的角度考虑问题！</p>\n<p>两点细节：</p>\n<ul>\n<li>向前兼容（尽量不要接口已升级，老接口全不能用，那就不是好的接口设计）</li>\n<li>使用方便（让调用者可以一目了然知道接口的作用，简化传参，说明返回值等等）</li>\n</ul>\n<h4 id=\"如何写代码？\"><a href=\"#如何写代码？\" class=\"headerlink\" title=\"如何写代码？\"></a>如何写代码？</h4><p>代码是一种表达的方式。是写给人看的，要有<strong>编程规范</strong>。</p>\n<p>拥有编程规范的理想状态：1. 看别人代码就像看自己代码一样易懂；2. 看代码主要看逻辑，不要过多注重细节；3. 代码尽可能地不要让人去多想。</p>\n<blockquote>\n<p>Don’t make me think!</p>\n</blockquote>\n<h5 id=\"Moudle-模块\"><a href=\"#Moudle-模块\" class=\"headerlink\" title=\"Moudle 模块\"></a>Moudle 模块</h5><p>紧内聚，低耦合。单一功能。反例，定义一个 <code>utils.py</code> 内部包含诸多方法，不易懂。</p>\n<p>模块一般可以分为两类：</p>\n<ul>\n<li>数据类的模块（1. 主要完成对数据的封装； 2. 对外提供的数据接口）</li>\n<li>过程类的模块（1. 不要包含数据，可以是调用数据类的模块或者调用其他过程类模块； 2. 具备操作性质的模块）</li>\n</ul>\n<p>模块的重要性：<strong>1. 降低维护成本； 2. 更好地复用</strong></p>\n<h5 id=\"Class-类-和-Function-函数\"><a href=\"#Class-类-和-Function-函数\" class=\"headerlink\" title=\"Class 类 和 Function 函数\"></a>Class 类 和 Function 函数</h5><p>两者是不同的模型，各自有各自适用的范围。</p>\n<p>推荐方法：<strong>和类的成员无关的函数，尽量独立出去单独一个函数，不建议作为类的成员函数。</strong></p>\n<p>面向对象思想的讨论：多态和继承，需要谨慎适用，作为 <code>Python</code> 的工程师，不太推崇 <code>Java</code> 中继承和多态，因为系统是逐渐长起来的，并不是从一开始就是一个成熟的样子，所以很难凭空去设计一个继承的关系。</p>\n<h5 id=\"模块的构成\"><a href=\"#模块的构成\" class=\"headerlink\" title=\"模块的构成\"></a>模块的构成</h5><p>文件头（注释）</p>\n<ul>\n<li>模块的说明，简要功能</li>\n<li>修改历史（时间、修改人，修改的内容）</li>\n<li>其他特殊细节的说明</li>\n</ul>\n<p>函数（重要性仅次于模块）</p>\n<ul>\n<li>描述功能</li>\n<li>传入参数的描述（含义、类型、限制条件等等）</li>\n<li>返回值得描述（有足够明确的语义说明）<ul>\n<li>逻辑判断型 check isXXX</li>\n<li>操作型（成功 or 失败）</li>\n<li>数据获取型（状态 + 数据）</li>\n</ul>\n</li>\n<li>异常如何处理（是抛出？还是内部catch？要明确）</li>\n<li>明确单入口和单出口（多线程开发时尤为重要）</li>\n</ul>\n<p>函数要尽可能的规模小，足够短（BUG 往往出现在非常长的一个函数里）</p>\n<p>代码块的<strong>分段</strong>也很重要，分段背后是划分和逻辑表达。</p>\n<p>代码是一种表达能力的体现，也算是文科的范畴！<strong>注释不是补出来的！</strong></p>\n<p>命名的重要性：要准确、易懂、可读性强，尽量做到 <code>望名生义</code>。</p>\n<p>互联网时代的系统是<strong>运营</strong>出来的。</p>\n<p>可检测性也是尤其重要的。（埋点、监控等等）</p>\n<blockquote>\n<p>没有数据的收集，等于系统没有上线。</p>\n</blockquote>\n<p>监控不单单只有传统意义上的内存、CPU、网络、崩溃率的监控，还应有线上真实数据监控，需要有足够多的状态记录。</p>\n<p><strong>日志是很有限的一种监控手段</strong>，并且采集日志也是一种资源耗费。推荐的手段：可以使用埋点，对外提供接口，有单独的系统调用接口进行有针对性的采集。</p>\n<h3 id=\"修身\"><a href=\"#修身\" class=\"headerlink\" title=\"修身\"></a>修身</h3><blockquote>\n<p>好的程序员，与<strong>工作年限</strong>无关，与<strong>学历</strong>无关</p>\n</blockquote>\n<h4 id=\"学习-思考-实践\"><a href=\"#学习-思考-实践\" class=\"headerlink\" title=\"学习-思考-实践\"></a>学习-思考-实践</h4><p>学习：主观意愿地学习，途径也有很多，例如书籍、开源代码、社区。忌讳夜郎自大、井底之蛙。注重培养自己学习吸收的能力，多读多看但是数量不是最终目的。</p>\n<blockquote>\n<p>Stay Hungry, Stay Foolish.  – Steve Jobs</p>\n</blockquote>\n<p>思考：学习需要经过思考，形成自己的思维。</p>\n<p>实践：《卓有成效的时间管理者 - 德鲁克》推荐阅读</p>\n<h4 id=\"知识-方法-精神\"><a href=\"#知识-方法-精神\" class=\"headerlink\" title=\"知识-方法-精神\"></a>知识-方法-精神</h4><blockquote>\n<p>知识过时会非常快！</p>\n</blockquote>\n<p>方法：分析问题、解决问题的能力尤其重要（定义问题、识别问题、定义关键问题）</p>\n<p>精神：决定型，要做就要坚持做</p>\n<blockquote>\n<p>前进的道路上不能永远都是鲜花和掌声。</p>\n</blockquote>\n<blockquote>\n<p>基础乃治学之根本。</p>\n</blockquote>\n<p>数据结构、软件工程、逻辑思维能力、研究能力，需要5-8年时间磨炼。</p>\n<h4 id=\"推荐书籍\"><a href=\"#推荐书籍\" class=\"headerlink\" title=\"推荐书籍\"></a>推荐书籍</h4><ul>\n<li>人月神话</li>\n<li>代码大全</li>\n<li>201条准则</li>\n<li>快速开发</li>\n<li>系统结构</li>\n<li>操作系统</li>\n<li>网络基础</li>\n</ul>\n","categories":[],"tags":[{"name":"总结","path":"api/tags/总结.json"}]}