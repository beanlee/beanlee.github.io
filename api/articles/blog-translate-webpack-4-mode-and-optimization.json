{"title":"【译】Webpack 4 mode and optimization","slug":"blog-translate-webpack-4-mode-and-optimization","date":"2018-04-18T06:26:11.000Z","updated":"2018-06-20T01:31:47.236Z","comments":true,"path":"api/articles/blog-translate-webpack-4-mode-and-optimization.json","excerpt":"原文 https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a作者 Tobias Kopperswebpack 增加了一个模式配置（mode option）。下面来解释一下具体内容。","covers":["https://img14.360buyimg.com/uba/s750x500_jfs/t17446/171/1782320374/354853/1568df4e/5ad6eac5Na2c1d8ee.jpg!cc_2x1"],"content":"<p>原文 <a href=\"https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a\" target=\"_blank\" rel=\"noopener\">https://medium.com/webpack/webpack-4-mode-and-optimization-5423a6bc597a</a></p>\n<p>作者 <a href=\"https://medium.com/@sokra\" target=\"_blank\" rel=\"noopener\">Tobias Koppers</a></p>\n<p>webpack 增加了一个模式配置（mode option）。下面来解释一下具体内容。</p>\n<a id=\"more\"></a>\n<p><img src=\"https://img14.360buyimg.com/uba/s750x500_jfs/t17446/171/1782320374/354853/1568df4e/5ad6eac5Na2c1d8ee.jpg!cc_2x1\" alt></p>\n<p>webpack 4 增加了一个<code>模式</code>选项（<code>mode</code> option）。<strong>并且这个配置是必须存在的</strong>。（实际上它不是必须的配置项，但如果你省略掉没有配就会有警告。）</p>\n<p>webpack 4 目前有<strong>两个默认配置</strong>，<code>development</code> 和 <code>production</code> 。这两个值可以在 <code>mode</code> 中设置。</p>\n<p>设置 <code>development</code> 将会带给你最好*的开发体验，它专注于以下几点：</p>\n<ul>\n<li>浏览器 debug 工具</li>\n<li>开发周期内的快速增量编译</li>\n<li>运行时有用的错误信息</li>\n</ul>\n<p>（*实际上这里指最好的体验取决于你使用的方式，我们尽力在这里囊括了大多数通用部分）</p>\n<p>设置 <code>production</code> 将会带给你在发布应用时的一系列有用的默认设置，它专注于以下几点：</p>\n<ul>\n<li>更小的输出包尺寸</li>\n<li>运行时高效的代码</li>\n<li>忽略掉只在开发时启用（<code>development-only</code>）的代码</li>\n<li>不会暴露源码或者文件路径</li>\n<li>简化使用打包后资源过程</li>\n</ul>\n<p>最后一点非常重要。它基本意味着 <code>production</code> 会提供给你优化后的资源包，但这不是完美的优化有的资源包。这里还存在着很多可优化点，但是它们会让结果更难使用。这些优化点是有意被忽略的，因为在这里，我们更看重入门的体验高于完美的优化。大部分优化点也只在大型应用上起作用。</p>\n<hr>\n<p>随着这个 <code>mode</code> 配置的引入，我们尝试去减少 build 时必要配置。我们尝试着去用一些默认项去覆盖通用的配置。</p>\n<p>然而从我们的经验来看我们也知道默认配置并不适用于所有人。不同的团队有不同的需求，有时候会因为遗留代码、有时候会因为个人喜好、有时候会因为特殊的应用或者有时候使用者会认为这并不是最好通用解决方案。许多人确实想要修改默认配置以适应他们自己的项目。We got you covered. 增加 <code>mode</code> 并不意味这我们移除掉了这些配置。这里面仍然是一切皆可配置。实际上我们使内部大多数优化都是可配置的（你可以禁用掉他们）。</p>\n<p><code>mode</code> 选项是通过在配置中设置默认项实现的。这个不会被其他配置执行的 <code>mode</code> 也不会做任何行为。</p>\n<p>下一部分就会更深入地讨论因为<code>mode</code>或其他选项而影响的配置。</p>\n<hr>\n<h3 id=\"devtool\"><a href=\"#devtool\" class=\"headerlink\" title=\"devtool\"></a>devtool</h3><p>在 <code>development</code> 模式下默认是 <code>eval</code>。否则不使用 devtool。</p>\n<p><code>eval</code> devtool 没有提供最佳的质量，但是拥有很好的性能。这就是我们选择的折中方案。看一看这些配置的文档，这可以获取更高质量的 sourcemap。</p>\n<ul>\n<li>📉📉📉缺点：慢，bundle 体积大</li>\n<li>📈📈📈优点：优化 debug 的体验</li>\n</ul>\n<h3 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h3><p>只在 <code>development</code> 模式下启用，否则禁用缓存。</p>\n<p>缓存模块可以避免在没有改变时重建。</p>\n<p>在内存缓存只在 <code>watch</code> 模式下有用，并且我们假设你在开发时正在使用 <code>watch</code> 模式。不用缓存时，内存占用率更低。</p>\n<ul>\n<li>📉缺点：内存占用</li>\n<li>📈📈📈优点：更快的增量编译</li>\n</ul>\n<h3 id=\"module-unsafeCache\"><a href=\"#module-unsafeCache\" class=\"headerlink\" title=\"module.unsafeCache\"></a>module.unsafeCache</h3><p>只在 <code>cache</code> 启用时启用，否则禁用。</p>\n<p>缓存机械依赖项可以避免重新解析它们。</p>\n<ul>\n<li>📉缺点：内存占用，缓存入口可能错误</li>\n<li>📈📈📈优点：更快的增量编译</li>\n</ul>\n<h3 id=\"output-pathinfo\"><a href=\"#output-pathinfo\" class=\"headerlink\" title=\"output.pathinfo\"></a>output.pathinfo</h3><p>只在 <code>development</code> 模式下启用，否则禁用。</p>\n<p>这些额外的注释对于 debug 很有作用，尤其是使用 <code>eval</code> devtool。</p>\n<ul>\n<li>📉缺点：bundle 体积大，暴露路径信息</li>\n<li>📈优点：提升生成代码的可阅读性</li>\n</ul>\n<h3 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h3><p>只在 <code>production</code> 模式下启用，否则禁用。</p>\n<p>体积限制只对最小化资源起作用，同时伴随着性能开销。因此它只在生产模式下启用。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈优点：对打包 bundle 体积大小产出警告</li>\n</ul>\n<h3 id=\"optimization-removeAvailableModules\"><a href=\"#optimization-removeAvailableModules\" class=\"headerlink\" title=\"optimization.removeAvailableModules\"></a>optimization.removeAvailableModules</h3><p>总是开启。</p>\n<p>当他们在父级 chunk groups 中都可用时，这些模块会被移除掉。它可以减少资源包的体积。因为有更少的代码生成，更小的资源包就意味着更快的 build 过程。</p>\n<ul>\n<li>📉📉缺点：算法消耗</li>\n<li>📈📈📈优点：bundle 体积优化</li>\n</ul>\n<h3 id=\"optimization-removeEmptyChunks\"><a href=\"#optimization-removeEmptyChunks\" class=\"headerlink\" title=\"optimization.removeEmptyChunks\"></a>optimization.removeEmptyChunks</h3><p>总是开启。</p>\n<p>空 chunks 会被移除掉。这些在文件系统中减少 load 会导致更快的 build。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈📈📈优点：更少的请求</li>\n</ul>\n<h3 id=\"optimization-mergeDuplicateChunks\"><a href=\"#optimization-mergeDuplicateChunks\" class=\"headerlink\" title=\"optimization.mergeDuplicateChunks\"></a>optimization.mergeDuplicateChunks</h3><p>总是开启。</p>\n<p>相等的 chunks 会被合并。结果就是更少的生成代码，更快的 build。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈📈📈优点：更少的请求和下载</li>\n</ul>\n<h3 id=\"optimization-flagIncludedChunks\"><a href=\"#optimization-flagIncludedChunks\" class=\"headerlink\" title=\"optimization.flagIncludedChunks\"></a>optimization.flagIncludedChunks</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>确定作为其他 chunks 子集的 chunks，并且这样方式对齐标记，即当加载较大 chunks 时，不必加载子集。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈📈📈优点：更少的请求和下载</li>\n</ul>\n<h3 id=\"optimization-occurrenceOrder\"><a href=\"#optimization-occurrenceOrder\" class=\"headerlink\" title=\"optimization.occurrenceOrder\"></a>optimization.occurrenceOrder</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>提供更常用的 ids 更小（更短）的值。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈优点：bundle 体积优化</li>\n</ul>\n<h3 id=\"optimization-providedExports\"><a href=\"#optimization-providedExports\" class=\"headerlink\" title=\"optimization.providedExports\"></a>optimization.providedExports</h3><p>总是开启。</p>\n<p>尽可能地确定每一个 module 的 exports。这个信息被用于其他优化或者生成代码。为了消除歧义：为 <code>export * from</code> 生成更有效率的代码。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈优点：bundle 体积优化，其他优化需求</li>\n</ul>\n<h3 id=\"optimization-usedExports\"><a href=\"#optimization-usedExports\" class=\"headerlink\" title=\"optimization.usedExports\"></a>optimization.usedExports</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>尽可能地确定每一个 module 的 exports。它依赖于 <code>optimization.providedExports</code>。这个信息被用于其他优化或者生成代码。消除歧义：导出不会生成无用的 exports， 当所有的用途都被兼容的时候导出 names 就是零碎的单独字符定义。在最小化中 DCE 会有一处，同时移除掉无用的 exports。</p>\n<ul>\n<li>📉📉缺点：算法消耗</li>\n<li>📈📈优点：bundle 体积优化</li>\n</ul>\n<h3 id=\"optimization-sideEffects\"><a href=\"#optimization-sideEffects\" class=\"headerlink\" title=\"optimization.sideEffects\"></a>optimization.sideEffects</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>认可在 <code>package.json</code> 或 <code>rules</code> 中的 <code>sideEffects</code> 标志去消除 modules。 它依赖 <code>optimization.providedExports</code>  和 <code>optimization.usedExports</code>。这些依赖都有所开销，但是消除依赖通过减少生成代码在性能上有积极的影响。它也依赖于你自己的代码。为了更好的性能，去尝试吧。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈📈📈优点：bundle 体积优化，更少生成代码</li>\n</ul>\n<h3 id=\"optimization-concatenateModules\"><a href=\"#optimization-concatenateModules\" class=\"headerlink\" title=\"optimization.concatenateModules\"></a>optimization.concatenateModules</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>尝试查找模块图中可以安全连接到单个模块中的段。它依赖于<code>optimization.providedExports</code> 和 <code>optimization.usedExports</code>。</p>\n<ul>\n<li>📉📉📉缺点：额外的语法分析，作用域分析和定义重命名</li>\n<li>📈📈📈优点：运行时性能、bundle 体积优化</li>\n</ul>\n<h3 id=\"optimization-splitChunks\"><a href=\"#optimization-splitChunks\" class=\"headerlink\" title=\"optimization.splitChunks\"></a>optimization.splitChunks</h3><p>总是开启。</p>\n<p>查找在 chunks 之间哪些 module 被共享，同时将他们拆分到独立的 chunks 中，目的是减少重复或者从 application modules 中分离 vendor modules。</p>\n<ul>\n<li>📉缺点：算法消耗，额外的请求</li>\n<li>📈📈📈优点：更少生成代码，更好的缓存，更少的下载请求</li>\n</ul>\n<h3 id=\"optimization-runtimeChunk\"><a href=\"#optimization-runtimeChunk\" class=\"headerlink\" title=\"optimization.runtimeChunk\"></a>optimization.runtimeChunk</h3><p>总是开启。</p>\n<p>为 webpack 运行时和 chunk manifest 创建一个独立的 chunk。这个 chunk 应该内联到 HTML 中。</p>\n<ul>\n<li>📉缺点：更大的 HTML 文件</li>\n<li>📈优点：更好的缓存</li>\n</ul>\n<h3 id=\"optimization-noEmitOnErrors\"><a href=\"#optimization-noEmitOnErrors\" class=\"headerlink\" title=\"optimization.noEmitOnErrors\"></a>optimization.noEmitOnErrors</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>当发生编译错误的时候不输出资源包。</p>\n<ul>\n<li>📉缺点：无法使用应用程序的起作用的部分</li>\n<li>📈优点：没有损坏的 bundles</li>\n</ul>\n<h3 id=\"optimization-namedModules\"><a href=\"#optimization-namedModules\" class=\"headerlink\" title=\"optimization.namedModules\"></a>optimization.namedModules</h3><p>只在 <code>development</code> 模式下开启，否则禁用。</p>\n<p>取代数值型 ID，提供给 module 更有用的命名。</p>\n<ul>\n<li>📉缺点：bundle 体积增加</li>\n<li>📈优点：更好的错误报告和 debug</li>\n</ul>\n<h3 id=\"optimization-nodeEnv\"><a href=\"#optimization-nodeEnv\" class=\"headerlink\" title=\"optimization.nodeEnv\"></a>optimization.nodeEnv</h3><p><code>mode</code> 值得默认项：<code>development</code> 或者 <code>production</code>。</p>\n<p>定义 <code>process.env.NODE_ENV</code> 成为编译时常量值。这就允许移除掉 development only 的代码。</p>\n<ul>\n<li>📉缺点：开发环境的代码与生产环境的代码不同</li>\n<li>📈📈优点：减小 bundle 体积，提高运行效率</li>\n</ul>\n<h3 id=\"optimization-minimize\"><a href=\"#optimization-minimize\" class=\"headerlink\" title=\"optimization.minimize\"></a>optimization.minimize</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>使用最小化工具来压缩输出的资源包，比如（<code>optimization.minimizer</code>默认使用的<code>uglify-js</code>）。</p>\n<ul>\n<li>📉📉📉缺点：编译速度降低</li>\n<li>📈📈📈优点：减小 bundle 体积</li>\n</ul>\n<h3 id=\"optimization-portableRecords\"><a href=\"#optimization-portableRecords\" class=\"headerlink\" title=\"optimization.portableRecords\"></a>optimization.portableRecords</h3><p>在文件内记录时启用，否则禁用。</p>\n<p>记录中使用的标识与上下文目录有关。</p>\n<ul>\n<li>📉缺点：影响速度降低</li>\n<li>📈优点：记录与目录无关</li>\n</ul>\n","more":"<p><img src=\"https://img14.360buyimg.com/uba/s750x500_jfs/t17446/171/1782320374/354853/1568df4e/5ad6eac5Na2c1d8ee.jpg!cc_2x1\" alt></p>\n<p>webpack 4 增加了一个<code>模式</code>选项（<code>mode</code> option）。<strong>并且这个配置是必须存在的</strong>。（实际上它不是必须的配置项，但如果你省略掉没有配就会有警告。）</p>\n<p>webpack 4 目前有<strong>两个默认配置</strong>，<code>development</code> 和 <code>production</code> 。这两个值可以在 <code>mode</code> 中设置。</p>\n<p>设置 <code>development</code> 将会带给你最好*的开发体验，它专注于以下几点：</p>\n<ul>\n<li>浏览器 debug 工具</li>\n<li>开发周期内的快速增量编译</li>\n<li>运行时有用的错误信息</li>\n</ul>\n<p>（*实际上这里指最好的体验取决于你使用的方式，我们尽力在这里囊括了大多数通用部分）</p>\n<p>设置 <code>production</code> 将会带给你在发布应用时的一系列有用的默认设置，它专注于以下几点：</p>\n<ul>\n<li>更小的输出包尺寸</li>\n<li>运行时高效的代码</li>\n<li>忽略掉只在开发时启用（<code>development-only</code>）的代码</li>\n<li>不会暴露源码或者文件路径</li>\n<li>简化使用打包后资源过程</li>\n</ul>\n<p>最后一点非常重要。它基本意味着 <code>production</code> 会提供给你优化后的资源包，但这不是完美的优化有的资源包。这里还存在着很多可优化点，但是它们会让结果更难使用。这些优化点是有意被忽略的，因为在这里，我们更看重入门的体验高于完美的优化。大部分优化点也只在大型应用上起作用。</p>\n<hr>\n<p>随着这个 <code>mode</code> 配置的引入，我们尝试去减少 build 时必要配置。我们尝试着去用一些默认项去覆盖通用的配置。</p>\n<p>然而从我们的经验来看我们也知道默认配置并不适用于所有人。不同的团队有不同的需求，有时候会因为遗留代码、有时候会因为个人喜好、有时候会因为特殊的应用或者有时候使用者会认为这并不是最好通用解决方案。许多人确实想要修改默认配置以适应他们自己的项目。We got you covered. 增加 <code>mode</code> 并不意味这我们移除掉了这些配置。这里面仍然是一切皆可配置。实际上我们使内部大多数优化都是可配置的（你可以禁用掉他们）。</p>\n<p><code>mode</code> 选项是通过在配置中设置默认项实现的。这个不会被其他配置执行的 <code>mode</code> 也不会做任何行为。</p>\n<p>下一部分就会更深入地讨论因为<code>mode</code>或其他选项而影响的配置。</p>\n<hr>\n<h3 id=\"devtool\"><a href=\"#devtool\" class=\"headerlink\" title=\"devtool\"></a>devtool</h3><p>在 <code>development</code> 模式下默认是 <code>eval</code>。否则不使用 devtool。</p>\n<p><code>eval</code> devtool 没有提供最佳的质量，但是拥有很好的性能。这就是我们选择的折中方案。看一看这些配置的文档，这可以获取更高质量的 sourcemap。</p>\n<ul>\n<li>📉📉📉缺点：慢，bundle 体积大</li>\n<li>📈📈📈优点：优化 debug 的体验</li>\n</ul>\n<h3 id=\"cache\"><a href=\"#cache\" class=\"headerlink\" title=\"cache\"></a>cache</h3><p>只在 <code>development</code> 模式下启用，否则禁用缓存。</p>\n<p>缓存模块可以避免在没有改变时重建。</p>\n<p>在内存缓存只在 <code>watch</code> 模式下有用，并且我们假设你在开发时正在使用 <code>watch</code> 模式。不用缓存时，内存占用率更低。</p>\n<ul>\n<li>📉缺点：内存占用</li>\n<li>📈📈📈优点：更快的增量编译</li>\n</ul>\n<h3 id=\"module-unsafeCache\"><a href=\"#module-unsafeCache\" class=\"headerlink\" title=\"module.unsafeCache\"></a>module.unsafeCache</h3><p>只在 <code>cache</code> 启用时启用，否则禁用。</p>\n<p>缓存机械依赖项可以避免重新解析它们。</p>\n<ul>\n<li>📉缺点：内存占用，缓存入口可能错误</li>\n<li>📈📈📈优点：更快的增量编译</li>\n</ul>\n<h3 id=\"output-pathinfo\"><a href=\"#output-pathinfo\" class=\"headerlink\" title=\"output.pathinfo\"></a>output.pathinfo</h3><p>只在 <code>development</code> 模式下启用，否则禁用。</p>\n<p>这些额外的注释对于 debug 很有作用，尤其是使用 <code>eval</code> devtool。</p>\n<ul>\n<li>📉缺点：bundle 体积大，暴露路径信息</li>\n<li>📈优点：提升生成代码的可阅读性</li>\n</ul>\n<h3 id=\"performance\"><a href=\"#performance\" class=\"headerlink\" title=\"performance\"></a>performance</h3><p>只在 <code>production</code> 模式下启用，否则禁用。</p>\n<p>体积限制只对最小化资源起作用，同时伴随着性能开销。因此它只在生产模式下启用。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈优点：对打包 bundle 体积大小产出警告</li>\n</ul>\n<h3 id=\"optimization-removeAvailableModules\"><a href=\"#optimization-removeAvailableModules\" class=\"headerlink\" title=\"optimization.removeAvailableModules\"></a>optimization.removeAvailableModules</h3><p>总是开启。</p>\n<p>当他们在父级 chunk groups 中都可用时，这些模块会被移除掉。它可以减少资源包的体积。因为有更少的代码生成，更小的资源包就意味着更快的 build 过程。</p>\n<ul>\n<li>📉📉缺点：算法消耗</li>\n<li>📈📈📈优点：bundle 体积优化</li>\n</ul>\n<h3 id=\"optimization-removeEmptyChunks\"><a href=\"#optimization-removeEmptyChunks\" class=\"headerlink\" title=\"optimization.removeEmptyChunks\"></a>optimization.removeEmptyChunks</h3><p>总是开启。</p>\n<p>空 chunks 会被移除掉。这些在文件系统中减少 load 会导致更快的 build。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈📈📈优点：更少的请求</li>\n</ul>\n<h3 id=\"optimization-mergeDuplicateChunks\"><a href=\"#optimization-mergeDuplicateChunks\" class=\"headerlink\" title=\"optimization.mergeDuplicateChunks\"></a>optimization.mergeDuplicateChunks</h3><p>总是开启。</p>\n<p>相等的 chunks 会被合并。结果就是更少的生成代码，更快的 build。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈📈📈优点：更少的请求和下载</li>\n</ul>\n<h3 id=\"optimization-flagIncludedChunks\"><a href=\"#optimization-flagIncludedChunks\" class=\"headerlink\" title=\"optimization.flagIncludedChunks\"></a>optimization.flagIncludedChunks</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>确定作为其他 chunks 子集的 chunks，并且这样方式对齐标记，即当加载较大 chunks 时，不必加载子集。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈📈📈优点：更少的请求和下载</li>\n</ul>\n<h3 id=\"optimization-occurrenceOrder\"><a href=\"#optimization-occurrenceOrder\" class=\"headerlink\" title=\"optimization.occurrenceOrder\"></a>optimization.occurrenceOrder</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>提供更常用的 ids 更小（更短）的值。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈优点：bundle 体积优化</li>\n</ul>\n<h3 id=\"optimization-providedExports\"><a href=\"#optimization-providedExports\" class=\"headerlink\" title=\"optimization.providedExports\"></a>optimization.providedExports</h3><p>总是开启。</p>\n<p>尽可能地确定每一个 module 的 exports。这个信息被用于其他优化或者生成代码。为了消除歧义：为 <code>export * from</code> 生成更有效率的代码。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈优点：bundle 体积优化，其他优化需求</li>\n</ul>\n<h3 id=\"optimization-usedExports\"><a href=\"#optimization-usedExports\" class=\"headerlink\" title=\"optimization.usedExports\"></a>optimization.usedExports</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>尽可能地确定每一个 module 的 exports。它依赖于 <code>optimization.providedExports</code>。这个信息被用于其他优化或者生成代码。消除歧义：导出不会生成无用的 exports， 当所有的用途都被兼容的时候导出 names 就是零碎的单独字符定义。在最小化中 DCE 会有一处，同时移除掉无用的 exports。</p>\n<ul>\n<li>📉📉缺点：算法消耗</li>\n<li>📈📈优点：bundle 体积优化</li>\n</ul>\n<h3 id=\"optimization-sideEffects\"><a href=\"#optimization-sideEffects\" class=\"headerlink\" title=\"optimization.sideEffects\"></a>optimization.sideEffects</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>认可在 <code>package.json</code> 或 <code>rules</code> 中的 <code>sideEffects</code> 标志去消除 modules。 它依赖 <code>optimization.providedExports</code>  和 <code>optimization.usedExports</code>。这些依赖都有所开销，但是消除依赖通过减少生成代码在性能上有积极的影响。它也依赖于你自己的代码。为了更好的性能，去尝试吧。</p>\n<ul>\n<li>📉缺点：算法消耗</li>\n<li>📈📈📈优点：bundle 体积优化，更少生成代码</li>\n</ul>\n<h3 id=\"optimization-concatenateModules\"><a href=\"#optimization-concatenateModules\" class=\"headerlink\" title=\"optimization.concatenateModules\"></a>optimization.concatenateModules</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>尝试查找模块图中可以安全连接到单个模块中的段。它依赖于<code>optimization.providedExports</code> 和 <code>optimization.usedExports</code>。</p>\n<ul>\n<li>📉📉📉缺点：额外的语法分析，作用域分析和定义重命名</li>\n<li>📈📈📈优点：运行时性能、bundle 体积优化</li>\n</ul>\n<h3 id=\"optimization-splitChunks\"><a href=\"#optimization-splitChunks\" class=\"headerlink\" title=\"optimization.splitChunks\"></a>optimization.splitChunks</h3><p>总是开启。</p>\n<p>查找在 chunks 之间哪些 module 被共享，同时将他们拆分到独立的 chunks 中，目的是减少重复或者从 application modules 中分离 vendor modules。</p>\n<ul>\n<li>📉缺点：算法消耗，额外的请求</li>\n<li>📈📈📈优点：更少生成代码，更好的缓存，更少的下载请求</li>\n</ul>\n<h3 id=\"optimization-runtimeChunk\"><a href=\"#optimization-runtimeChunk\" class=\"headerlink\" title=\"optimization.runtimeChunk\"></a>optimization.runtimeChunk</h3><p>总是开启。</p>\n<p>为 webpack 运行时和 chunk manifest 创建一个独立的 chunk。这个 chunk 应该内联到 HTML 中。</p>\n<ul>\n<li>📉缺点：更大的 HTML 文件</li>\n<li>📈优点：更好的缓存</li>\n</ul>\n<h3 id=\"optimization-noEmitOnErrors\"><a href=\"#optimization-noEmitOnErrors\" class=\"headerlink\" title=\"optimization.noEmitOnErrors\"></a>optimization.noEmitOnErrors</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>当发生编译错误的时候不输出资源包。</p>\n<ul>\n<li>📉缺点：无法使用应用程序的起作用的部分</li>\n<li>📈优点：没有损坏的 bundles</li>\n</ul>\n<h3 id=\"optimization-namedModules\"><a href=\"#optimization-namedModules\" class=\"headerlink\" title=\"optimization.namedModules\"></a>optimization.namedModules</h3><p>只在 <code>development</code> 模式下开启，否则禁用。</p>\n<p>取代数值型 ID，提供给 module 更有用的命名。</p>\n<ul>\n<li>📉缺点：bundle 体积增加</li>\n<li>📈优点：更好的错误报告和 debug</li>\n</ul>\n<h3 id=\"optimization-nodeEnv\"><a href=\"#optimization-nodeEnv\" class=\"headerlink\" title=\"optimization.nodeEnv\"></a>optimization.nodeEnv</h3><p><code>mode</code> 值得默认项：<code>development</code> 或者 <code>production</code>。</p>\n<p>定义 <code>process.env.NODE_ENV</code> 成为编译时常量值。这就允许移除掉 development only 的代码。</p>\n<ul>\n<li>📉缺点：开发环境的代码与生产环境的代码不同</li>\n<li>📈📈优点：减小 bundle 体积，提高运行效率</li>\n</ul>\n<h3 id=\"optimization-minimize\"><a href=\"#optimization-minimize\" class=\"headerlink\" title=\"optimization.minimize\"></a>optimization.minimize</h3><p>只在 <code>production</code> 模式下开启，否则禁用。</p>\n<p>使用最小化工具来压缩输出的资源包，比如（<code>optimization.minimizer</code>默认使用的<code>uglify-js</code>）。</p>\n<ul>\n<li>📉📉📉缺点：编译速度降低</li>\n<li>📈📈📈优点：减小 bundle 体积</li>\n</ul>\n<h3 id=\"optimization-portableRecords\"><a href=\"#optimization-portableRecords\" class=\"headerlink\" title=\"optimization.portableRecords\"></a>optimization.portableRecords</h3><p>在文件内记录时启用，否则禁用。</p>\n<p>记录中使用的标识与上下文目录有关。</p>\n<ul>\n<li>📉缺点：影响速度降低</li>\n<li>📈优点：记录与目录无关</li>\n</ul>","categories":[{"name":"前端技术","path":"api/categories/前端技术.json"}],"tags":[{"name":"Webpack","path":"api/tags/Webpack.json"},{"name":"构建工具","path":"api/tags/构建工具.json"}]}