{"title":"Serverless 一些探究（一）","slug":"learn-serverless-1","date":"2019-04-23T14:49:10.000Z","updated":"2019-04-24T05:38:41.701Z","comments":true,"path":"api/articles/learn-serverless-1.json","excerpt":"笔者近期在准备部门内部的一个分享，思考了一些主题，最终还是决定结合自己以前的 Server 端开发经验，来分享 Serverless 的相关主题。下文就是近期看过的一些资料，梳理总结后，制作分享 Slide 的逐字稿缩减而来的内容，分享结束自己应该还会在这部分挖掘和实践内容，感兴趣的同学可以留言讨论，持续关注。","covers":["https://img12.360buyimg.com/imagetools/jfs/t1/31478/20/14772/117378/5cbfc83cE3e54fd5c/a9c7bc3fc410fc83.png","https://img12.360buyimg.com/imagetools/jfs/t1/35024/39/5041/47745/5cbfc883Ea64a9afb/cd6a453552a61863.jpg","https://img13.360buyimg.com/imagetools/jfs/t1/31123/30/14938/62110/5cbfd86aE4d298c2d/e4d749fcf8bebbe9.png","https://img14.360buyimg.com/imagetools/jfs/t1/32322/39/14955/68163/5cbfd8ceE6dca5aba/5ec35ad91a639b58.png","https://img10.360buyimg.com/imagetools/jfs/t1/35669/26/5049/41753/5cbfc82cE3dcdef5a/44cd5664334d3147.png","https://img11.360buyimg.com/imagetools/jfs/t1/39852/25/2208/798984/5cbfc813Ef7ba456d/0841958f9f4ad1ba.png","https://img10.360buyimg.com/imagetools/jfs/t1/30962/38/15042/925646/5cbfc807E3572f826/931728f36c3a020e.png","https://img13.360buyimg.com/imagetools/jfs/t1/40122/31/2186/98044/5cbfc86cE71db4f20/d0f40086b6e6adb0.png","https://img14.360buyimg.com/imagetools/jfs/t1/37237/34/5506/283277/5cbfc863Efe309042/627cbcbbd720df24.png","https://img14.360buyimg.com/imagetools/jfs/t1/40014/2/2186/75810/5cbfc87cE68b55b7a/b38bd8b96f8d177f.jpg"],"content":"<blockquote>\n<p>笔者近期在准备部门内部的一个分享，思考了一些主题，最终还是决定结合自己以前的 Server 端开发经验，来分享 Serverless 的相关主题。</p>\n</blockquote>\n<blockquote>\n<p>下文就是近期看过的一些资料，梳理总结后，制作分享 Slide 的逐字稿缩减而来的内容，分享结束自己应该还会在这部分挖掘和实践内容，感兴趣的同学可以留言讨论，持续关注。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"云计算热度不再？\"><a href=\"#云计算热度不再？\" class=\"headerlink\" title=\"云计算热度不再？\"></a>云计算热度不再？</h2><p>当今社会技术热点，大家都在讨论的是区块链、AI、机器学习等等，但几年前大家追捧的<strong>云计算</strong>，经历了多年的发展，已经有了长足的进步，只是目前格局逐渐明朗，商业上也形成了几个梯队，云计算在助力前面所说的热点方面起着非常重要的作用。<strong>Serverless</strong> 作为云计算中逐渐崭露头角的一种方案，在圈中也是备受关注。</p>\n<h2 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h2><p>互联网公司内面向C端用户应用的开发，DevOps 文化盛行依旧，相信大家一定都不陌生（Development 和 Operations）。</p>\n<p><img src=\"https://img12.360buyimg.com/imagetools/jfs/t1/31478/20/14772/117378/5cbfc83cE3e54fd5c/a9c7bc3fc410fc83.png\" alt=\"\"></p>\n<p>维基百科上解释它实际是一种重视开发人员与运维人员紧密沟通的文化和方法，通过自动化的软件交付和架构演进的流程，来使得构建、测试、发布软件变得更快捷、频繁和可靠。大家可以看这张图，这样的方案在很多公司逐渐地演变成迫使开发人员也要具备一些运维方向的知识，来配合运维同事实现快速迭代，实现流程的自动化等等。这在流程完善的大厂感受可能不是很深，因为我们分工明确，但是在有快速产品迭代计划的小团队或者创业公司就会感受很深。</p>\n<p>它的盛行导致一来是提高了对我们业务开发人员的要求，二来增加了整个软件应用交付的成本，尤其是现在的我们作为前端工程师，一旦开始写服务端代码，就要考虑机器成本，CPU占用，内存占用，数据存储，网络带宽，负载均衡等等问题。</p>\n<p>那么有没有办法去规避呢？让专业的运维人员去做呢？</p>\n<hr>\n<h2 id=\"演进\"><a href=\"#演进\" class=\"headerlink\" title=\"演进\"></a>演进</h2><p>云计算在不断演进的过程中，一步一步在提出解决的办法。</p>\n<p>首先，我们先来了解几个缩写：</p>\n<ul>\n<li>IDC：Internet Data Center，自建互联网数据中心机房，自行维护硬件资源、物理机器、网络环境等等，开发完成阶段后，还需要进行繁重且耗时很长的部署过程。</li>\n<li>IAAS：Infrastructure as a Service，基础设施服务，租用公共数据中心的物理机器资源，节省了机器的成本</li>\n<li>PAAS：Platform as a service，平台即服务，云厂商提供一个平台，目前尤其火的是基于以 Docker 为主的容器技术的兴起来完成快速部署，比如某一个容器可以快速部署数据库、通过拉取代码快速部署应用；当业务量增加，容器扩容需要形成集群，管理这些容器就需要非常耗费人力；目前热度很高的由 Google 开源的 Kubernetes（K8S）就是用来自动编排容器的利器。</li>\n<li>DAAS：Data as a service，数据即服务，只对数据的采集、治理、分析、聚合等打包一起对外提供服务。</li>\n<li>SAAS：Software as a service 面向普通用户，用户只需要购买和使用软件就可以享受这种服务，比如传统的财务软件，办公自动化系统等等。</li>\n</ul>\n<p>网上很多资料，大家都拿吃披萨来举例，如下图：</p>\n<p><img src=\"https://img12.360buyimg.com/imagetools/jfs/t1/35024/39/5041/47745/5cbfc883Ea64a9afb/cd6a453552a61863.jpg\" alt=\"\"></p>\n<h2 id=\"受限与NodeJS\"><a href=\"#受限与NodeJS\" class=\"headerlink\" title=\"受限与NodeJS\"></a>受限与NodeJS</h2><p>作为一名前端工程师，大家日常业务开发的工作内容是什么？</p>\n<p>用 HTML / CSS 去还原视觉稿、用 Javascript 去完成交互、调用 HTTP 数据接口，完成数据的展现和操作等等。最终测试完成，构建打包，部署CDN源站或者其他托管静态资源的系统完成上线。</p>\n<p>整个过程中我们只关注脚本和样式是在客户端运行良好，性能和兼容性是否达到比较好的一个平衡，往往对于后台提供的服务和数据能做的非常有限，只需要关注接口容灾、数据兜底、异常处理错误跳转等情况就可以比较好的完成所谓的前端工程师的工作职责。</p>\n<p>对于我们依赖使用的服务，我们一般话语权不高，包括UI层的数据结构设计并不能完全是我们自主地从前端角度出发去设计。</p>\n<blockquote>\n<p>GragphQL 这类方案不在本次分享的范围内，它的出现使得数据更具有弹性，但 Serverless 更彻底。</p>\n</blockquote>\n<hr>\n<p>现在请大家<strong>换一个角度思考</strong>，如果我们没有大厂的平台、如果我们正处创业初期的小公司、如果我们是一名独立开发者、如果没有从开发到部署的完善流程、没有CDN、没有数据接口，我们要如何开发一个动态数据的网站或是一个独立的应用？</p>\n<p>我们可以说，我可以写 NodeJS，它帮助我们扩展了原来的前端工作范围，笔者所在的前端部门内部基于 NodeJS 开发系统和应用都是很好的例子，NodeJS 给予了可以写Javascript 代码的人更大的空间，我们可以写越来越多的服务端业务逻辑，来直接提供服务。</p>\n<h4 id=\"同样困惑\"><a href=\"#同样困惑\" class=\"headerlink\" title=\"同样困惑\"></a>同样困惑</h4><p>那么，开发好的 NodeJS 服务，放在哪里运行？这就又成了问题，有过自己开发类似系统经历的同学一定有这样的困惑，除了开发功能代码，还要纠结选什么样的机器，几核CPU，多大内存，网络带宽；如果开发独立的应用，需要购买云主机，去亚马逊、微软、Google、阿里云、腾讯云、京东云等等这样云厂商的选云主机的话更是纠结，超级多规格组合在一起，非常苦恼。</p>\n<p><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/31123/30/14938/62110/5cbfd86aE4d298c2d/e4d749fcf8bebbe9.png\" alt=\"\"></p>\n<p>因为做选择的时候，既要为应用规模大小、扩容需求、安装哪一种操作系统、配合哪一种数据库、未来如何组成集群、如何做负载均衡、如何打通开发到部署流程等等等等问题而操心。即便是现在有 Docker、K8S 这样的容器技术和自动编排来辅助，他们虽然可以帮助你做到应用秒级部署，快速重复部署，也依然麻烦，仍然需要付出高昂地运维技术的学习成本，即便你是一个全能达人，你也需要花费大量的时间和精力去解决这些环境和资源的问题，这就对想快速实现一个点子开发出原型或者开发一个小型应用的你来说，像是拦在路上的不得不跨越的一座山，拖慢来你和你团队的行进速度。</p>\n<p>还有一个问题，绝大部分应用上线云主机或虚拟机以后，主机或者容器的 CPU 利用率、内存使用率、网络带宽的利用率都非常低，因为你要为未来增加流量做 Buffer ，并且你需要为这些冗余的运行时自掏腰包，因为你的服务一旦上线就要 7X24 的运行。我们现如今公司内部的基于私有云架构开发和部署也是如此的问题，都是需要开发者为这些运维相关的技术债务来埋单。</p>\n<p>那么既然有这么多困难，我们前端工程师还有机会成为服务的生产者，而不单单是消费者吗？</p>\n<p><strong>答案肯定是有的！</strong></p>\n<hr>\n<h2 id=\"转变\"><a href=\"#转变\" class=\"headerlink\" title=\"转变\"></a>转变</h2><p>Serverless 架构的出现，为我们提供了一个窗口。目前还没有一个普遍公认的权威定义，最新的一个定义是这样描述的。</p>\n<blockquote>\n<p>“无服务器架构是基于互联网的系统，其中应用开发不使用常规的服务进程。相反，它们仅依赖于第三方服务，客户端逻辑与托管远程服务之间的调用过程的组合。”</p>\n</blockquote>\n<p>首先这个概念是在2012年由iron.io公司提出，而在2014年由 AWS 发布 Lambda 时正式商业化使用，目前 AWS 在云计算市场占有率高达44%（2017年数据），同时Microsoft、Google、IBM 都有对应的云产品，在国内，像 JDCloud、Aliyun、Tencent Cloud 也都提供了基础的功能，并且据说阿里内部正在力推适合的场景从旧框架向 Serverless 架构转变，从几个阿里前端的 BLOG 可以看到大家在关注和讨论这项技术对于前端会有什么影响。</p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/32322/39/14955/68163/5cbfd8ceE6dca5aba/5ec35ad91a639b58.png\" alt=\"\"></p>\n<h2 id=\"Serverless\"><a href=\"#Serverless\" class=\"headerlink\" title=\"Serverless\"></a>Serverless</h2><p>支持 Serverless 架构的云厂商，允许我们可以开发服务端逻辑放在无状态的云计算容器中，由事件来进行触发，其他完全交给云来管理。</p>\n<p>Serverless 目前分为两种：</p>\n<ul>\n<li><code>BAAS（Backend as a Service后端即服务）</code>如文件存储、数据存储、推送服务、身份统一验证等，我们平时写 NodeJS 或者 Java 都是接触不到的，不是这次讨论的主角。</li>\n<li><code>FAAS（Functions as a Service 函数即服务）</code>服务商提供一个平台，允许用户自己开发、运行和管理这些函数的功能，而无需搭建和维护基础框架。这是我们关注的重点。</li>\n</ul>\n<h3 id=\"FaaS\"><a href=\"#FaaS\" class=\"headerlink\" title=\"FaaS\"></a>FaaS</h3><p><code>FaaS</code> 本质上是一种事件驱动的由消息触发的服务，FaaS 厂商一般都会集成各种同步或者异步的事件源，通过订阅这些事件，从而达到触发或者定时触发来运行函数。FaaS 允许我们上传一个完整函数的代码片段，这个函数提供单一的无状态的服务，当事件触发执行这个函数的时候，它就会启动并开始执行，完成后等着被销毁，不存在上下文信息和状态。换言之，就是如果函数不运行，这个实例就不存在，比如你购买的云服务实际就并没有进行计费，只有当你执行的时候才会按照函数运行<code>次数收费</code>。</p>\n<p><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/35669/26/5049/41753/5cbfc82cE3dcdef5a/44cd5664334d3147.png\" alt=\"\"></p>\n<p>事件触发，给大家举一个类似例子，有一款网络应用：</p>\n<p><strong>IFTTT</strong>：汇聚了世界各种有趣的 API ，通过触发一件、一件事来形成链式的调用完成有趣功能。比如你打Uber，当快到家附近的时候，它会自动触发家里的灯打开，空调开启；比如你发布一个 Instagram Photo 会自动将图片存储到 Google Photo 或者同步到微博；诸如此类，都是当发生一个事件的时候才去触发下一个事件；</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p><code>AWS Lambda</code> <a href=\"https://amazonaws-china.com/cn/lambda/?nc2=h_m1\" target=\"_blank\" rel=\"noopener\">官网文档</a> 和 <code>Google Cloud Functions</code> <a href=\"https://cloud.google.com/functions/use-cases/\" target=\"_blank\" rel=\"noopener\">官网文档</a>，举了几个很贴切的例子。物联网IoT\u000b、独立应用\u000b、游戏后台服务引擎、\u000b数据报表（定时）等等。</p>\n<p>貌似看上去离前端有些远，再举一个例子，去年微信小程序提出的云开发，就是一次 Serverless 的尝试，让可以写小程序的开发，不必等服务端，而自己利用云存储、云数据库、云函数来自给自足。</p>\n<p>客户端开发，可以自行将数据、文件、信息同步到云端，而又不需要过于操心运维。</p>\n<h4 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h4><p>接触一个新事物，总需要从<code>Hello World</code>，这里我直接使用 serverless.com 中的 example，做了一个用于 TODO 应用的 server 端，适用 AWS 的DynamoBD（NoSQL），拥有CRUD功能，整体代码也就只有200+行。</p>\n<p><img src=\"https://img11.360buyimg.com/imagetools/jfs/t1/39852/25/2208/798984/5cbfc813Ef7ba456d/0841958f9f4ad1ba.png\" alt=\"\"></p>\n<p><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/30962/38/15042/925646/5cbfc807E3572f826/931728f36c3a020e.png\" alt=\"\"></p>\n<p><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/40122/31/2186/98044/5cbfc86cE71db4f20/d0f40086b6e6adb0.png\" alt=\"\"></p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/37237/34/5506/283277/5cbfc863Efe309042/627cbcbbd720df24.png\" alt=\"\"></p>\n<h3 id=\"函数优势\"><a href=\"#函数优势\" class=\"headerlink\" title=\"函数优势\"></a>函数优势</h3><p>举例 AWS Lambda 支持 Python、Java、Go、Ruby、.Net、NodeJS 和自建环境，因为这些服务端语言都有自己擅长的场景和成熟的库，可以更方便地去助力完成数据计算、机器学习、图像处理等等工作。</p>\n<hr>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><ul>\n<li>降低成本（开发、运营成本）</li>\n<li>计费方式按价值付费，不再为 7x24 埋单（即使遇到网络攻击，也可以设定阈值做到合理防护，不至于收到天价账单）</li>\n<li>灵活自动拓展，无需关心扩容缩容问题</li>\n<li>开发人员更专注核心业务</li>\n</ul>\n<h3 id=\"看上去万能？\"><a href=\"#看上去万能？\" class=\"headerlink\" title=\"看上去万能？\"></a>看上去万能？</h3><blockquote>\n<p>No silver bullet. - The Mythical Man-Month</p>\n</blockquote>\n<p>任何解决方案都不是万能的，一定是有它适合的场景，解决适合的问题而存在。</p>\n<h3 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h3><ul>\n<li>启动延迟、不适合长时间运行，支持语言版本更新不及时（AWS NodeJS 8.10）</li>\n<li>没有上下文环境，离线调试（serverless offline）</li>\n<li>完全依赖云，貌似是一条无法回头的路</li>\n</ul>\n<blockquote>\n<p>是否一切都要部署到云端，这个一直处在争论中，本文也持中立态度，要分场景适用。</p>\n</blockquote>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Serverless 架构带来的价值和挑战是并存的，国内的 Serverless 发展也在初期阶段，它改变了我们开发模式，也改变软件系统的一部分设计，未来发展的好坏，我们无法控制，但是我们可以保持关注，适当尝试。</p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/40014/2/2186/75810/5cbfc87cE68b55b7a/b38bd8b96f8d177f.jpg\" alt=\"\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://aws.amazon.com/cn/serverless/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/cn/serverless/</a></li>\n<li><a href=\"https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/</a></li>\n<li><a href=\"https://jimmysong.io/posts/what-is-serverless/\" target=\"_blank\" rel=\"noopener\">https://jimmysong.io/posts/what-is-serverless/</a></li>\n<li><a href=\"https://serverless.ink/\" target=\"_blank\" rel=\"noopener\">https://serverless.ink/</a></li>\n<li><a href=\"https://serverless.com/\" target=\"_blank\" rel=\"noopener\">https://serverless.com/</a></li>\n<li><a href=\"https://docs.azure.cn/zh-cn/azure-functions/\" target=\"_blank\" rel=\"noopener\">https://docs.azure.cn/zh-cn/azure-functions/</a></li>\n<li><a href=\"https://firebase.google.com/docs/functions/use-cases\" target=\"_blank\" rel=\"noopener\">https://firebase.google.com/docs/functions/use-cases</a></li>\n<li><a href=\"https://www.infoq.cn/article/klfShH_dWU9ooU8idvYD\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/klfShH_dWU9ooU8idvYD</a></li>\n<li><a href=\"https://juejin.im/post/5caf019ff265da039444987b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5caf019ff265da039444987b</a></li>\n<li><a href=\"https://juejin.im/post/5c85b8e45188257dfa07da5c\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5c85b8e45188257dfa07da5c</a></li>\n<li><a href=\"https://github.com/dt-fe/weekly/blob/master/94.%E7%B2%BE%E8%AF%BB%E3%80%8AServerless%20%E7%BB%99%E5%89%8D%E7%AB%AF%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%80%E4%B9%88%E3%80%8B.md\" target=\"_blank\" rel=\"noopener\">https://github.com/dt-fe/weekly/blob/master/serverless.md</a></li>\n</ul>\n","more":"<h2 id=\"云计算热度不再？\"><a href=\"#云计算热度不再？\" class=\"headerlink\" title=\"云计算热度不再？\"></a>云计算热度不再？</h2><p>当今社会技术热点，大家都在讨论的是区块链、AI、机器学习等等，但几年前大家追捧的<strong>云计算</strong>，经历了多年的发展，已经有了长足的进步，只是目前格局逐渐明朗，商业上也形成了几个梯队，云计算在助力前面所说的热点方面起着非常重要的作用。<strong>Serverless</strong> 作为云计算中逐渐崭露头角的一种方案，在圈中也是备受关注。</p>\n<h2 id=\"DevOps\"><a href=\"#DevOps\" class=\"headerlink\" title=\"DevOps\"></a>DevOps</h2><p>互联网公司内面向C端用户应用的开发，DevOps 文化盛行依旧，相信大家一定都不陌生（Development 和 Operations）。</p>\n<p><img src=\"https://img12.360buyimg.com/imagetools/jfs/t1/31478/20/14772/117378/5cbfc83cE3e54fd5c/a9c7bc3fc410fc83.png\" alt=\"\"></p>\n<p>维基百科上解释它实际是一种重视开发人员与运维人员紧密沟通的文化和方法，通过自动化的软件交付和架构演进的流程，来使得构建、测试、发布软件变得更快捷、频繁和可靠。大家可以看这张图，这样的方案在很多公司逐渐地演变成迫使开发人员也要具备一些运维方向的知识，来配合运维同事实现快速迭代，实现流程的自动化等等。这在流程完善的大厂感受可能不是很深，因为我们分工明确，但是在有快速产品迭代计划的小团队或者创业公司就会感受很深。</p>\n<p>它的盛行导致一来是提高了对我们业务开发人员的要求，二来增加了整个软件应用交付的成本，尤其是现在的我们作为前端工程师，一旦开始写服务端代码，就要考虑机器成本，CPU占用，内存占用，数据存储，网络带宽，负载均衡等等问题。</p>\n<p>那么有没有办法去规避呢？让专业的运维人员去做呢？</p>\n<hr>\n<h2 id=\"演进\"><a href=\"#演进\" class=\"headerlink\" title=\"演进\"></a>演进</h2><p>云计算在不断演进的过程中，一步一步在提出解决的办法。</p>\n<p>首先，我们先来了解几个缩写：</p>\n<ul>\n<li>IDC：Internet Data Center，自建互联网数据中心机房，自行维护硬件资源、物理机器、网络环境等等，开发完成阶段后，还需要进行繁重且耗时很长的部署过程。</li>\n<li>IAAS：Infrastructure as a Service，基础设施服务，租用公共数据中心的物理机器资源，节省了机器的成本</li>\n<li>PAAS：Platform as a service，平台即服务，云厂商提供一个平台，目前尤其火的是基于以 Docker 为主的容器技术的兴起来完成快速部署，比如某一个容器可以快速部署数据库、通过拉取代码快速部署应用；当业务量增加，容器扩容需要形成集群，管理这些容器就需要非常耗费人力；目前热度很高的由 Google 开源的 Kubernetes（K8S）就是用来自动编排容器的利器。</li>\n<li>DAAS：Data as a service，数据即服务，只对数据的采集、治理、分析、聚合等打包一起对外提供服务。</li>\n<li>SAAS：Software as a service 面向普通用户，用户只需要购买和使用软件就可以享受这种服务，比如传统的财务软件，办公自动化系统等等。</li>\n</ul>\n<p>网上很多资料，大家都拿吃披萨来举例，如下图：</p>\n<p><img src=\"https://img12.360buyimg.com/imagetools/jfs/t1/35024/39/5041/47745/5cbfc883Ea64a9afb/cd6a453552a61863.jpg\" alt=\"\"></p>\n<h2 id=\"受限与NodeJS\"><a href=\"#受限与NodeJS\" class=\"headerlink\" title=\"受限与NodeJS\"></a>受限与NodeJS</h2><p>作为一名前端工程师，大家日常业务开发的工作内容是什么？</p>\n<p>用 HTML / CSS 去还原视觉稿、用 Javascript 去完成交互、调用 HTTP 数据接口，完成数据的展现和操作等等。最终测试完成，构建打包，部署CDN源站或者其他托管静态资源的系统完成上线。</p>\n<p>整个过程中我们只关注脚本和样式是在客户端运行良好，性能和兼容性是否达到比较好的一个平衡，往往对于后台提供的服务和数据能做的非常有限，只需要关注接口容灾、数据兜底、异常处理错误跳转等情况就可以比较好的完成所谓的前端工程师的工作职责。</p>\n<p>对于我们依赖使用的服务，我们一般话语权不高，包括UI层的数据结构设计并不能完全是我们自主地从前端角度出发去设计。</p>\n<blockquote>\n<p>GragphQL 这类方案不在本次分享的范围内，它的出现使得数据更具有弹性，但 Serverless 更彻底。</p>\n</blockquote>\n<hr>\n<p>现在请大家<strong>换一个角度思考</strong>，如果我们没有大厂的平台、如果我们正处创业初期的小公司、如果我们是一名独立开发者、如果没有从开发到部署的完善流程、没有CDN、没有数据接口，我们要如何开发一个动态数据的网站或是一个独立的应用？</p>\n<p>我们可以说，我可以写 NodeJS，它帮助我们扩展了原来的前端工作范围，笔者所在的前端部门内部基于 NodeJS 开发系统和应用都是很好的例子，NodeJS 给予了可以写Javascript 代码的人更大的空间，我们可以写越来越多的服务端业务逻辑，来直接提供服务。</p>\n<h4 id=\"同样困惑\"><a href=\"#同样困惑\" class=\"headerlink\" title=\"同样困惑\"></a>同样困惑</h4><p>那么，开发好的 NodeJS 服务，放在哪里运行？这就又成了问题，有过自己开发类似系统经历的同学一定有这样的困惑，除了开发功能代码，还要纠结选什么样的机器，几核CPU，多大内存，网络带宽；如果开发独立的应用，需要购买云主机，去亚马逊、微软、Google、阿里云、腾讯云、京东云等等这样云厂商的选云主机的话更是纠结，超级多规格组合在一起，非常苦恼。</p>\n<p><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/31123/30/14938/62110/5cbfd86aE4d298c2d/e4d749fcf8bebbe9.png\" alt=\"\"></p>\n<p>因为做选择的时候，既要为应用规模大小、扩容需求、安装哪一种操作系统、配合哪一种数据库、未来如何组成集群、如何做负载均衡、如何打通开发到部署流程等等等等问题而操心。即便是现在有 Docker、K8S 这样的容器技术和自动编排来辅助，他们虽然可以帮助你做到应用秒级部署，快速重复部署，也依然麻烦，仍然需要付出高昂地运维技术的学习成本，即便你是一个全能达人，你也需要花费大量的时间和精力去解决这些环境和资源的问题，这就对想快速实现一个点子开发出原型或者开发一个小型应用的你来说，像是拦在路上的不得不跨越的一座山，拖慢来你和你团队的行进速度。</p>\n<p>还有一个问题，绝大部分应用上线云主机或虚拟机以后，主机或者容器的 CPU 利用率、内存使用率、网络带宽的利用率都非常低，因为你要为未来增加流量做 Buffer ，并且你需要为这些冗余的运行时自掏腰包，因为你的服务一旦上线就要 7X24 的运行。我们现如今公司内部的基于私有云架构开发和部署也是如此的问题，都是需要开发者为这些运维相关的技术债务来埋单。</p>\n<p>那么既然有这么多困难，我们前端工程师还有机会成为服务的生产者，而不单单是消费者吗？</p>\n<p><strong>答案肯定是有的！</strong></p>\n<hr>\n<h2 id=\"转变\"><a href=\"#转变\" class=\"headerlink\" title=\"转变\"></a>转变</h2><p>Serverless 架构的出现，为我们提供了一个窗口。目前还没有一个普遍公认的权威定义，最新的一个定义是这样描述的。</p>\n<blockquote>\n<p>“无服务器架构是基于互联网的系统，其中应用开发不使用常规的服务进程。相反，它们仅依赖于第三方服务，客户端逻辑与托管远程服务之间的调用过程的组合。”</p>\n</blockquote>\n<p>首先这个概念是在2012年由iron.io公司提出，而在2014年由 AWS 发布 Lambda 时正式商业化使用，目前 AWS 在云计算市场占有率高达44%（2017年数据），同时Microsoft、Google、IBM 都有对应的云产品，在国内，像 JDCloud、Aliyun、Tencent Cloud 也都提供了基础的功能，并且据说阿里内部正在力推适合的场景从旧框架向 Serverless 架构转变，从几个阿里前端的 BLOG 可以看到大家在关注和讨论这项技术对于前端会有什么影响。</p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/32322/39/14955/68163/5cbfd8ceE6dca5aba/5ec35ad91a639b58.png\" alt=\"\"></p>\n<h2 id=\"Serverless\"><a href=\"#Serverless\" class=\"headerlink\" title=\"Serverless\"></a>Serverless</h2><p>支持 Serverless 架构的云厂商，允许我们可以开发服务端逻辑放在无状态的云计算容器中，由事件来进行触发，其他完全交给云来管理。</p>\n<p>Serverless 目前分为两种：</p>\n<ul>\n<li><code>BAAS（Backend as a Service后端即服务）</code>如文件存储、数据存储、推送服务、身份统一验证等，我们平时写 NodeJS 或者 Java 都是接触不到的，不是这次讨论的主角。</li>\n<li><code>FAAS（Functions as a Service 函数即服务）</code>服务商提供一个平台，允许用户自己开发、运行和管理这些函数的功能，而无需搭建和维护基础框架。这是我们关注的重点。</li>\n</ul>\n<h3 id=\"FaaS\"><a href=\"#FaaS\" class=\"headerlink\" title=\"FaaS\"></a>FaaS</h3><p><code>FaaS</code> 本质上是一种事件驱动的由消息触发的服务，FaaS 厂商一般都会集成各种同步或者异步的事件源，通过订阅这些事件，从而达到触发或者定时触发来运行函数。FaaS 允许我们上传一个完整函数的代码片段，这个函数提供单一的无状态的服务，当事件触发执行这个函数的时候，它就会启动并开始执行，完成后等着被销毁，不存在上下文信息和状态。换言之，就是如果函数不运行，这个实例就不存在，比如你购买的云服务实际就并没有进行计费，只有当你执行的时候才会按照函数运行<code>次数收费</code>。</p>\n<p><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/35669/26/5049/41753/5cbfc82cE3dcdef5a/44cd5664334d3147.png\" alt=\"\"></p>\n<p>事件触发，给大家举一个类似例子，有一款网络应用：</p>\n<p><strong>IFTTT</strong>：汇聚了世界各种有趣的 API ，通过触发一件、一件事来形成链式的调用完成有趣功能。比如你打Uber，当快到家附近的时候，它会自动触发家里的灯打开，空调开启；比如你发布一个 Instagram Photo 会自动将图片存储到 Google Photo 或者同步到微博；诸如此类，都是当发生一个事件的时候才去触发下一个事件；</p>\n<h3 id=\"场景\"><a href=\"#场景\" class=\"headerlink\" title=\"场景\"></a>场景</h3><p><code>AWS Lambda</code> <a href=\"https://amazonaws-china.com/cn/lambda/?nc2=h_m1\" target=\"_blank\" rel=\"noopener\">官网文档</a> 和 <code>Google Cloud Functions</code> <a href=\"https://cloud.google.com/functions/use-cases/\" target=\"_blank\" rel=\"noopener\">官网文档</a>，举了几个很贴切的例子。物联网IoT\u000b、独立应用\u000b、游戏后台服务引擎、\u000b数据报表（定时）等等。</p>\n<p>貌似看上去离前端有些远，再举一个例子，去年微信小程序提出的云开发，就是一次 Serverless 的尝试，让可以写小程序的开发，不必等服务端，而自己利用云存储、云数据库、云函数来自给自足。</p>\n<p>客户端开发，可以自行将数据、文件、信息同步到云端，而又不需要过于操心运维。</p>\n<h4 id=\"DEMO\"><a href=\"#DEMO\" class=\"headerlink\" title=\"DEMO\"></a>DEMO</h4><p>接触一个新事物，总需要从<code>Hello World</code>，这里我直接使用 serverless.com 中的 example，做了一个用于 TODO 应用的 server 端，适用 AWS 的DynamoBD（NoSQL），拥有CRUD功能，整体代码也就只有200+行。</p>\n<p><img src=\"https://img11.360buyimg.com/imagetools/jfs/t1/39852/25/2208/798984/5cbfc813Ef7ba456d/0841958f9f4ad1ba.png\" alt=\"\"></p>\n<p><img src=\"https://img10.360buyimg.com/imagetools/jfs/t1/30962/38/15042/925646/5cbfc807E3572f826/931728f36c3a020e.png\" alt=\"\"></p>\n<p><img src=\"https://img13.360buyimg.com/imagetools/jfs/t1/40122/31/2186/98044/5cbfc86cE71db4f20/d0f40086b6e6adb0.png\" alt=\"\"></p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/37237/34/5506/283277/5cbfc863Efe309042/627cbcbbd720df24.png\" alt=\"\"></p>\n<h3 id=\"函数优势\"><a href=\"#函数优势\" class=\"headerlink\" title=\"函数优势\"></a>函数优势</h3><p>举例 AWS Lambda 支持 Python、Java、Go、Ruby、.Net、NodeJS 和自建环境，因为这些服务端语言都有自己擅长的场景和成熟的库，可以更方便地去助力完成数据计算、机器学习、图像处理等等工作。</p>\n<hr>\n<h3 id=\"优势\"><a href=\"#优势\" class=\"headerlink\" title=\"优势\"></a>优势</h3><ul>\n<li>降低成本（开发、运营成本）</li>\n<li>计费方式按价值付费，不再为 7x24 埋单（即使遇到网络攻击，也可以设定阈值做到合理防护，不至于收到天价账单）</li>\n<li>灵活自动拓展，无需关心扩容缩容问题</li>\n<li>开发人员更专注核心业务</li>\n</ul>\n<h3 id=\"看上去万能？\"><a href=\"#看上去万能？\" class=\"headerlink\" title=\"看上去万能？\"></a>看上去万能？</h3><blockquote>\n<p>No silver bullet. - The Mythical Man-Month</p>\n</blockquote>\n<p>任何解决方案都不是万能的，一定是有它适合的场景，解决适合的问题而存在。</p>\n<h3 id=\"缺陷\"><a href=\"#缺陷\" class=\"headerlink\" title=\"缺陷\"></a>缺陷</h3><ul>\n<li>启动延迟、不适合长时间运行，支持语言版本更新不及时（AWS NodeJS 8.10）</li>\n<li>没有上下文环境，离线调试（serverless offline）</li>\n<li>完全依赖云，貌似是一条无法回头的路</li>\n</ul>\n<blockquote>\n<p>是否一切都要部署到云端，这个一直处在争论中，本文也持中立态度，要分场景适用。</p>\n</blockquote>\n<hr>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><p>Serverless 架构带来的价值和挑战是并存的，国内的 Serverless 发展也在初期阶段，它改变了我们开发模式，也改变软件系统的一部分设计，未来发展的好坏，我们无法控制，但是我们可以保持关注，适当尝试。</p>\n<p><img src=\"https://img14.360buyimg.com/imagetools/jfs/t1/40014/2/2186/75810/5cbfc87cE68b55b7a/b38bd8b96f8d177f.jpg\" alt=\"\"></p>\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><ul>\n<li><a href=\"https://aws.amazon.com/cn/serverless/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/cn/serverless/</a></li>\n<li><a href=\"https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/\" target=\"_blank\" rel=\"noopener\">https://aws.amazon.com/cn/blogs/china/iaas-faas-serverless/</a></li>\n<li><a href=\"https://jimmysong.io/posts/what-is-serverless/\" target=\"_blank\" rel=\"noopener\">https://jimmysong.io/posts/what-is-serverless/</a></li>\n<li><a href=\"https://serverless.ink/\" target=\"_blank\" rel=\"noopener\">https://serverless.ink/</a></li>\n<li><a href=\"https://serverless.com/\" target=\"_blank\" rel=\"noopener\">https://serverless.com/</a></li>\n<li><a href=\"https://docs.azure.cn/zh-cn/azure-functions/\" target=\"_blank\" rel=\"noopener\">https://docs.azure.cn/zh-cn/azure-functions/</a></li>\n<li><a href=\"https://firebase.google.com/docs/functions/use-cases\" target=\"_blank\" rel=\"noopener\">https://firebase.google.com/docs/functions/use-cases</a></li>\n<li><a href=\"https://www.infoq.cn/article/klfShH_dWU9ooU8idvYD\" target=\"_blank\" rel=\"noopener\">https://www.infoq.cn/article/klfShH_dWU9ooU8idvYD</a></li>\n<li><a href=\"https://juejin.im/post/5caf019ff265da039444987b\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5caf019ff265da039444987b</a></li>\n<li><a href=\"https://juejin.im/post/5c85b8e45188257dfa07da5c\" target=\"_blank\" rel=\"noopener\">https://juejin.im/post/5c85b8e45188257dfa07da5c</a></li>\n<li><a href=\"https://github.com/dt-fe/weekly/blob/master/94.%E7%B2%BE%E8%AF%BB%E3%80%8AServerless%20%E7%BB%99%E5%89%8D%E7%AB%AF%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%80%E4%B9%88%E3%80%8B.md\" target=\"_blank\" rel=\"noopener\">https://github.com/dt-fe/weekly/blob/master/serverless.md</a></li>\n</ul>","categories":[{"name":"技术","path":"api/categories/技术.json"}],"tags":[{"name":"Cloud","path":"api/tags/Cloud.json"},{"name":"Serverless","path":"api/tags/Serverless.json"},{"name":"Server","path":"api/tags/Server.json"}]}